System.registerModule("../../../../node_modules/systemjs/lib/amd-helpers.js", [], function() {
  "use strict";
  var __moduleName = "../../../../node_modules/systemjs/lib/amd-helpers.js";
  hookConstructor(function(constructor) {
    return function() {
      var loader = this;
      constructor.call(this);
      var commentRegEx = /(\/\*([\s\S]*?)\*\/|([^:]|^)\/\/(.*)$)/mg;
      var cjsRequirePre = "(?:^|[^$_a-zA-Z\\xA0-\\uFFFF.])";
      var cjsRequirePost = "\\s*\\(\\s*(\"([^\"]+)\"|'([^']+)')\\s*\\)";
      var fnBracketRegEx = /\(([^\)]*)\)/;
      var wsRegEx = /^\s+|\s+$/g;
      var requireRegExs = {};
      function getCJSDeps(source, requireIndex) {
        source = source.replace(commentRegEx, '');
        var params = source.match(fnBracketRegEx);
        var requireAlias = (params[1].split(',')[requireIndex] || 'require').replace(wsRegEx, '');
        var requireRegEx = requireRegExs[requireAlias] || (requireRegExs[requireAlias] = new RegExp(cjsRequirePre + requireAlias + cjsRequirePost, 'g'));
        requireRegEx.lastIndex = 0;
        var deps = [];
        var match;
        while (match = requireRegEx.exec(source))
          deps.push(match[2] || match[3]);
        return deps;
      }
      function require(names, callback, errback, referer) {
        if (typeof names == 'object' && !(names instanceof Array))
          return require.apply(null, Array.prototype.splice.call(arguments, 1, arguments.length - 1));
        if (typeof names == 'string' && typeof callback == 'function')
          names = [names];
        if (names instanceof Array) {
          var dynamicRequires = [];
          for (var i = 0; i < names.length; i++)
            dynamicRequires.push(loader['import'](names[i], referer));
          Promise.all(dynamicRequires).then(function(modules) {
            if (callback)
              callback.apply(null, modules);
          }, errback);
        } else if (typeof names == 'string') {
          var module = loader.get(loader.normalizeSync(names, referer));
          if (!module)
            throw new Error('Module not already loaded loading "' + names + '" from "' + referer + '".');
          return module.__useDefault ? module['default'] : module;
        } else
          throw new TypeError('Invalid require');
      }
      function define(name, deps, factory) {
        if (typeof name != 'string') {
          factory = deps;
          deps = name;
          name = null;
        }
        if (!(deps instanceof Array)) {
          factory = deps;
          deps = ['require', 'exports', 'module'].splice(0, factory.length);
        }
        if (typeof factory != 'function')
          factory = (function(factory) {
            return function() {
              return factory;
            };
          })(factory);
        if (deps[deps.length - 1] === undefined)
          deps.pop();
        var requireIndex,
            exportsIndex,
            moduleIndex;
        if ((requireIndex = indexOf.call(deps, 'require')) != -1) {
          deps.splice(requireIndex, 1);
          if (!name)
            deps = deps.concat(getCJSDeps(factory.toString(), requireIndex));
        }
        if ((exportsIndex = indexOf.call(deps, 'exports')) != -1)
          deps.splice(exportsIndex, 1);
        if ((moduleIndex = indexOf.call(deps, 'module')) != -1)
          deps.splice(moduleIndex, 1);
        function execute(req, exports, module) {
          var depValues = [];
          for (var i = 0; i < deps.length; i++)
            depValues.push(req(deps[i]));
          module.uri = module.id;
          module.config = function() {};
          if (moduleIndex != -1)
            depValues.splice(moduleIndex, 0, module);
          if (exportsIndex != -1)
            depValues.splice(exportsIndex, 0, exports);
          if (requireIndex != -1) {
            var contextualRequire = function(names, callback, errback) {
              if (typeof names == 'string' && typeof callback != 'function')
                return req(names);
              return require.call(loader, names, callback, errback, module.id);
            };
            contextualRequire.toUrl = function(name) {
              var defaultJSExtension = loader.defaultJSExtensions && name.substr(name.length - 3, 3) != '.js';
              var url = loader.normalizeSync(name, module.id);
              if (defaultJSExtension && url.substr(url.length - 3, 3) == '.js')
                url = url.substr(0, url.length - 3);
              return url;
            };
            depValues.splice(requireIndex, 0, contextualRequire);
          }
          var curRequire = __global.require;
          __global.require = require;
          var output = factory.apply(exportsIndex == -1 ? __global : exports, depValues);
          __global.require = curRequire;
          if (typeof output == 'undefined' && module)
            output = module.exports;
          if (typeof output != 'undefined')
            return output;
        }
        var entry = createEntry();
        entry.name = name && (loader.normalizeSync || loader.normalize).call(loader, name);
        entry.deps = deps;
        entry.execute = execute;
        loader.pushRegister_({
          amd: true,
          entry: entry
        });
      }
      define.amd = {};
      hook('reduceRegister_', function(reduceRegister) {
        return function(load, register) {
          if (!register || !register.amd)
            return reduceRegister.call(this, load, register);
          var curMeta = load && load.metadata;
          var entry = register.entry;
          if (curMeta)
            curMeta.format = 'amd';
          if (!entry.name) {
            if (!curMeta)
              throw new TypeError('Unexpected anonymous AMD define.');
            if (curMeta.entry)
              throw new TypeError('Multiple defines for anonymous module ' + load.name);
            curMeta.entry = entry;
          } else {
            if (curMeta) {
              if (!curMeta.entry && !curMeta.bundle)
                curMeta.entry = entry;
              else
                curMeta.entry = undefined;
              curMeta.bundle = true;
            }
            if (!(entry.name in this.defined))
              this.defined[entry.name] = entry;
          }
        };
      });
      function createDefine() {
        var oldModule = __global.module;
        var oldExports = __global.exports;
        var oldDefine = __global.define;
        __global.module = undefined;
        __global.exports = undefined;
        __global.define = define;
        return function() {
          __global.define = oldDefine;
          __global.module = oldModule;
          __global.exports = oldExports;
        };
      }
      loader.set('@@amd-helpers', loader.newModule({
        createDefine: createDefine,
        require: require,
        define: define
      }));
      loader.amdDefine = define;
      loader.amdRequire = require;
    };
  });
  return {};
});
System.get("../../../../node_modules/systemjs/lib/amd-helpers.js" + '');
