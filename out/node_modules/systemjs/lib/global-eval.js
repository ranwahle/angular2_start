System.registerModule("../../../../node_modules/systemjs/lib/global-eval.js", [], function() {
  "use strict";
  var __moduleName = "../../../../node_modules/systemjs/lib/global-eval.js";
  var __exec;
  (function() {
    var curSystem;
    var callCounter = 0;
    var curLoad;
    function preExec(loader, load) {
      if (callCounter++ == 0)
        curSystem = __global.System;
      __global.System = loader;
      curLoad = load;
    }
    function postExec() {
      if (--callCounter == 0)
        __global.System = curSystem;
      curLoad = undefined;
    }
    hook('pushRegister_', function() {
      return function(register) {
        if (!curLoad)
          return false;
        this.reduceRegister_(curLoad, register);
        return true;
      };
    });
    var hasBtoa = typeof btoa != 'undefined';
    function getSource(load) {
      var lastLineIndex = load.source.lastIndexOf('\n');
      var wrap = load.metadata.format == 'esm' || load.metadata.format == 'register' || load.metadata.bundle;
      return (wrap ? '(function(System) {' : '') + load.source + (wrap ? '\n})(System);' : '') + (load.source.substr(lastLineIndex, 15) != '\n//# sourceURL=' ? '\n//# sourceURL=' + load.address + (load.metadata.sourceMap ? '!transpiled' : '') : '') + (load.metadata.sourceMap && hasBtoa && '\n//# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(load.metadata.sourceMap))) || '');
    }
    function evalExec(load) {
      if (load.metadata.integrity)
        throw new TypeError('Subresource integrity checking is not supported in Web Workers or Chrome Extensions.');
      try {
        preExec(this, load);
        new Function(getSource(load)).call(__global);
        postExec();
      } catch (e) {
        postExec();
        throw addToError(e, 'Evaluating ' + load.address);
      }
    }
    if (typeof document != 'undefined' && document.getElementsByTagName) {
      var head;
      var scripts = document.getElementsByTagName('script');
      $__curScript = scripts[scripts.length - 1];
      __exec = function(load) {
        if (!this.globalEvaluationScope)
          return evalExec.call(this, load);
        if (!head)
          head = document.head || document.body || document.documentElement;
        var script = document.createElement('script');
        script.text = getSource(load);
        var onerror = window.onerror;
        var e;
        window.onerror = function(_e) {
          e = addToError(_e, 'Evaluating ' + load.address);
        };
        preExec(this, load);
        if (load.metadata.integrity)
          script.setAttribute('integrity', load.metadata.integrity);
        if (load.metadata.nonce)
          script.setAttribute('nonce', load.metadata.nonce);
        head.appendChild(script);
        head.removeChild(script);
        postExec();
        window.onerror = onerror;
        if (e)
          throw e;
      };
    } else if (typeof require != 'undefined') {
      var vmModule = 'vm';
      var vm = require(vmModule);
      __exec = function vmExec(load) {
        if (!this.globalEvaluationScope)
          return evalExec.call(this, load);
        if (load.metadata.integrity)
          throw new TypeError('Subresource integrity checking is unavailable in Node.');
        try {
          preExec(this, load);
          vm.runInThisContext(getSource(load));
          postExec();
        } catch (e) {
          postExec();
          throw addToError(e.toString(), 'Evaluating ' + load.address);
        }
      };
    } else {
      __exec = evalExec;
    }
  })();
  return {};
});
System.get("../../../../node_modules/systemjs/lib/global-eval.js" + '');
