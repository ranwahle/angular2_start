System.registerModule("../../../../node_modules/systemjs/lib/meta.js", [], function() {
  "use strict";
  var __moduleName = "../../../../node_modules/systemjs/lib/meta.js";
  (function() {
    hookConstructor(function(constructor) {
      return function() {
        this.meta = {};
        constructor.call(this);
      };
    });
    hook('locate', function(locate) {
      return function(load) {
        var meta = this.meta;
        var name = load.name;
        var bestDepth = 0;
        var wildcardIndex;
        for (var module in meta) {
          wildcardIndex = module.indexOf('*');
          if (wildcardIndex === -1)
            continue;
          if (module.substr(0, wildcardIndex) === name.substr(0, wildcardIndex) && module.substr(wildcardIndex + 1) === name.substr(name.length - module.length + wildcardIndex + 1)) {
            var depth = module.split('/').length;
            if (depth > bestDepth)
              bestDepth = depth;
            extendMeta(load.metadata, meta[module], bestDepth != depth);
          }
        }
        if (meta[name])
          extendMeta(load.metadata, meta[name]);
        return locate.call(this, load);
      };
    });
    var metaRegEx = /^(\s*\/\*[^\*]*(\*(?!\/)[^\*]*)*\*\/|\s*\/\/[^\n]*|\s*"[^"]+"\s*;?|\s*'[^']+'\s*;?)+/;
    var metaPartRegEx = /\/\*[^\*]*(\*(?!\/)[^\*]*)*\*\/|\/\/[^\n]*|"[^"]+"\s*;?|'[^']+'\s*;?/g;
    function setMetaProperty(target, p, value) {
      var pParts = p.split('.');
      var curPart;
      while (pParts.length > 1) {
        curPart = pParts.shift();
        target = target[curPart] = target[curPart] || {};
      }
      curPart = pParts.shift();
      if (!(curPart in target))
        target[curPart] = value;
    }
    hook('translate', function(translate) {
      return function(load) {
        var meta = load.source.match(metaRegEx);
        if (meta) {
          var metaParts = meta[0].match(metaPartRegEx);
          for (var i = 0; i < metaParts.length; i++) {
            var curPart = metaParts[i];
            var len = curPart.length;
            var firstChar = curPart.substr(0, 1);
            if (curPart.substr(len - 1, 1) == ';')
              len--;
            if (firstChar != '"' && firstChar != "'")
              continue;
            var metaString = curPart.substr(1, curPart.length - 3);
            var metaName = metaString.substr(0, metaString.indexOf(' '));
            if (metaName) {
              var metaValue = metaString.substr(metaName.length + 1, metaString.length - metaName.length - 1);
              if (metaName.substr(metaName.length - 2, 2) == '[]') {
                metaName = metaName.substr(0, metaName.length - 2);
                load.metadata[metaName] = load.metadata[metaName] || [];
                load.metadata[metaName].push(metaValue);
              } else if (load.metadata[metaName] instanceof Array) {
                warn.call(this, 'Module ' + load.name + ' contains deprecated "deps ' + metaValue + '" meta syntax.\nThis should be updated to "deps[] ' + metaValue + '" for pushing to array meta.');
                load.metadata[metaName].push(metaValue);
              } else {
                setMetaProperty(load.metadata, metaName, metaValue);
              }
            } else {
              load.metadata[metaString] = true;
            }
          }
        }
        return translate.call(this, load);
      };
    });
  })();
  return {};
});
System.get("../../../../node_modules/systemjs/lib/meta.js" + '');
