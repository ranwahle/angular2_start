System.registerModule("../../../../node_modules/systemjs/lib/conditionals.js", [], function() {
  "use strict";
  var __moduleName = "../../../../node_modules/systemjs/lib/conditionals.js";
  function parseCondition(condition) {
    var conditionExport,
        conditionModule,
        negation;
    var negation = condition[0] == '~';
    var conditionExportIndex = condition.lastIndexOf('|');
    if (conditionExportIndex != -1) {
      conditionExport = condition.substr(conditionExportIndex + 1);
      conditionModule = condition.substr(negation, conditionExportIndex - negation) || '@system-env';
    } else {
      conditionExport = null;
      conditionModule = condition.substr(negation);
    }
    return {
      module: conditionModule,
      prop: conditionExport,
      negate: negation
    };
  }
  function serializeCondition(conditionObj) {
    return (conditionObj.negate ? '~' : '') + conditionObj.module + (conditionObj.prop ? '|' + conditionObj.prop : '');
  }
  function resolveCondition(conditionObj, parentName, bool) {
    return this['import'](conditionObj.module, parentName).then(function(m) {
      if (conditionObj.prop)
        m = readMemberExpression(conditionObj.prop, m);
      else if (typeof m == 'object' && m + '' == 'Module')
        m = m['default'];
      return conditionObj.negate ? !m : m;
    });
  }
  var interpolationRegEx = /#\{[^\}]+\}/;
  function interpolateConditional(name, parentName) {
    var conditionalMatch = name.match(interpolationRegEx);
    if (!conditionalMatch)
      return Promise.resolve(name);
    var conditionObj = parseCondition(conditionalMatch[0].substr(2, conditionalMatch[0].length - 3));
    if (this.builder)
      return this['normalize'](conditionObj.module, parentName).then(function(conditionModule) {
        conditionObj.module = conditionModule;
        return name.replace(interpolationRegEx, '#{' + serializeCondition(conditionObj) + '}');
      });
    return resolveCondition.call(this, conditionObj, parentName, false).then(function(conditionValue) {
      if (typeof conditionValue !== 'string')
        throw new TypeError('The condition value for ' + name + ' doesn\'t resolve to a string.');
      if (conditionValue.indexOf('/') != -1)
        throw new TypeError('Unabled to interpolate conditional ' + name + (parentName ? ' in ' + parentName : '') + '\n\tThe condition value ' + conditionValue + ' cannot contain a "/" separator.');
      return name.replace(interpolationRegEx, conditionValue);
    });
  }
  function booleanConditional(name, parentName) {
    var booleanIndex = name.lastIndexOf('#?');
    if (booleanIndex == -1)
      return Promise.resolve(name);
    var conditionObj = parseCondition(name.substr(booleanIndex + 2));
    if (this.builder)
      return this['normalize'](conditionObj.module, parentName).then(function(conditionModule) {
        conditionObj.module = conditionModule;
        return name.substr(0, booleanIndex) + '#?' + serializeCondition(conditionObj);
      });
    return resolveCondition.call(this, conditionObj, parentName, true).then(function(conditionValue) {
      return conditionValue ? name.substr(0, booleanIndex) : '@empty';
    });
  }
  hookConstructor(function(constructor) {
    return function() {
      constructor.call(this);
      this.set('@system-env', this.newModule({
        browser: isBrowser,
        node: !!this._nodeRequire
      }));
    };
  });
  hook('normalize', function(normalize) {
    return function(name, parentName, parentAddress) {
      var loader = this;
      return booleanConditional.call(loader, name, parentName).then(function(name) {
        return normalize.call(loader, name, parentName, parentAddress);
      }).then(function(normalized) {
        return interpolateConditional.call(loader, normalized, parentName);
      });
    };
  });
  return {};
});
System.get("../../../../node_modules/systemjs/lib/conditionals.js" + '');
