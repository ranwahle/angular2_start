System.registerModule("../../../../node_modules/systemjs/lib/scriptLoader.js", [], function() {
  "use strict";
  var __moduleName = "../../../../node_modules/systemjs/lib/scriptLoader.js";
  (function() {
    if (typeof document != 'undefined')
      var head = document.getElementsByTagName('head')[0];
    var curSystem;
    var workerLoad = null;
    var ieEvents = head && (function() {
      var s = document.createElement('script');
      var isOpera = typeof opera !== 'undefined' && opera.toString() === '[object Opera]';
      return s.attachEvent && !(s.attachEvent.toString && s.attachEvent.toString().indexOf('[native code') < 0) && !isOpera;
    })();
    var interactiveLoadingScripts = [];
    var interactiveScript;
    function getInteractiveScriptLoad() {
      if (interactiveScript && interactiveScript.script.readyState === 'interactive')
        return interactiveScript.load;
      for (var i = 0; i < interactiveLoadingScripts.length; i++)
        if (interactiveLoadingScripts[i].script.readyState == 'interactive') {
          interactiveScript = interactiveLoadingScripts[i];
          return interactiveScript.load;
        }
    }
    var loadingCnt = 0;
    var registerQueue = [];
    hook('pushRegister_', function(pushRegister) {
      return function(register) {
        if (pushRegister.call(this, register))
          return false;
        if (workerLoad)
          this.reduceRegister_(workerLoad, register);
        else if (ieEvents)
          this.reduceRegister_(getInteractiveScriptLoad(), register);
        else if (loadingCnt)
          registerQueue.push(register);
        else
          this.reduceRegister_(null, register);
        return true;
      };
    });
    function webWorkerImport(loader, load) {
      return new Promise(function(resolve, reject) {
        if (load.metadata.integrity)
          reject(new Error('Subresource integrity checking is not supported in web workers.'));
        workerLoad = load;
        try {
          importScripts(load.address);
        } catch (e) {
          workerLoad = null;
          reject(e);
        }
        workerLoad = null;
        if (!load.metadata.entry)
          reject(new Error(load.address + ' did not call System.register or AMD define'));
        resolve('');
      });
    }
    hook('fetch', function(fetch) {
      return function(load) {
        var loader = this;
        if (!load.metadata.scriptLoad || (!isBrowser && !isWorker))
          return fetch.call(this, load);
        if (isWorker)
          return webWorkerImport(loader, load);
        return new Promise(function(resolve, reject) {
          var s = document.createElement('script');
          s.async = true;
          if (load.metadata.integrity)
            s.setAttribute('integrity', load.metadata.integrity);
          if (ieEvents) {
            s.attachEvent('onreadystatechange', complete);
            interactiveLoadingScripts.push({
              script: s,
              load: load
            });
          } else {
            s.addEventListener('load', complete, false);
            s.addEventListener('error', error, false);
          }
          loadingCnt++;
          curSystem = __global.System;
          s.src = load.address;
          head.appendChild(s);
          function complete(evt) {
            if (s.readyState && s.readyState != 'loaded' && s.readyState != 'complete')
              return;
            loadingCnt--;
            if (!load.metadata.entry && !registerQueue.length) {
              loader.reduceRegister_(load);
            } else if (!ieEvents) {
              for (var i = 0; i < registerQueue.length; i++)
                loader.reduceRegister_(load, registerQueue[i]);
              registerQueue = [];
            }
            cleanup();
            if (!load.metadata.entry && !load.metadata.bundle)
              reject(new Error(load.name + ' did not call System.register or AMD define'));
            resolve('');
          }
          function error(evt) {
            cleanup();
            reject(new Error('Unable to load script ' + load.address));
          }
          function cleanup() {
            __global.System = curSystem;
            if (s.detachEvent) {
              s.detachEvent('onreadystatechange', complete);
              for (var i = 0; i < interactiveLoadingScripts.length; i++)
                if (interactiveLoadingScripts[i].script == s) {
                  if (interactiveScript && interactiveScript.script == s)
                    interactiveScript = null;
                  interactiveLoadingScripts.splice(i, 1);
                }
            } else {
              s.removeEventListener('load', complete, false);
              s.removeEventListener('error', error, false);
            }
            head.removeChild(s);
          }
        });
      };
    });
  })();
  return {};
});
System.get("../../../../node_modules/systemjs/lib/scriptLoader.js" + '');
