System.registerModule("../../../../../../node_modules/fsevents/node_modules/fstream-ignore/test/read-file-order.js", [], function() {
  "use strict";
  var __moduleName = "../../../../../../node_modules/fsevents/node_modules/fstream-ignore/test/read-file-order.js";
  var IgnoreFile = require("../"),
      fs = require('fs');
  var c = require("./common.js");
  c.ignores({".gitignore": ["a/b/c/abc"]});
  c.ignores({".ignore": ["*", "!a/b/c/abc"]});
  var expected = ["/a", "/a/b", "/a/b/c", "/a/b/c/abc"];
  var originalReadFile = fs.readFile,
      parallelCount = 0,
      firstCall;
  fs.readFile = function(filename, options, callback) {
    if (typeof options === 'function') {
      callback = options;
      options = false;
    }
    parallelCount++;
    process.nextTick(function() {
      if (parallelCount > 1) {
        if (!firstCall) {
          return firstCall = function(cb) {
            originalReadFile(filename, options, function(err, data) {
              callback(err, data);
              if (cb)
                cb();
            });
          };
        }
        if (filename.indexOf('.gitignore') !== -1) {
          firstCall(function() {
            originalReadFile(filename, options, callback);
          });
        } else {
          originalReadFile(filename, options, function(err, data) {
            callback(err, data);
            firstCall();
          });
        }
      } else {
        originalReadFile(filename, options, callback);
        parallelCount = 0;
      }
    });
  };
  require("tap").test("read file order", function(t) {
    t.pass("start");
    IgnoreFile({
      path: __dirname + "/fixtures",
      ignoreFiles: [".gitignore", ".ignore"]
    }).on("ignoreFile", function(e) {
      console.error("ignore file!", e);
    }).on("child", function(e) {
      var p = e.path.substr(e.root.path.length);
      var i = expected.indexOf(p);
      if (i === -1) {
        t.fail("unexpected file found", {f: p});
      } else {
        t.pass(p);
        expected.splice(i, 1);
      }
    }).on("close", function() {
      fs.readFile = originalReadFile;
      t.notOk(expected.length, "all expected files should be seen");
      t.end();
    });
  });
  return {};
});
System.get("../../../../../../node_modules/fsevents/node_modules/fstream-ignore/test/read-file-order.js" + '');
