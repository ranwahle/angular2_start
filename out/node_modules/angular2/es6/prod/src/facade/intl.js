System.registerModule("../../../../../../../node_modules/angular2/es6/prod/src/facade/intl.js", [], function() {
  "use strict";
  var __moduleName = "../../../../../../../node_modules/angular2/es6/prod/src/facade/intl.js";
  var NumberFormatStyle;
  (function(NumberFormatStyle) {
    NumberFormatStyle[NumberFormatStyle["Decimal"] = 0] = "Decimal";
    NumberFormatStyle[NumberFormatStyle["Percent"] = 1] = "Percent";
    NumberFormatStyle[NumberFormatStyle["Currency"] = 2] = "Currency";
  })(NumberFormatStyle || (NumberFormatStyle = {}));
  var NumberFormatter = function() {
    function NumberFormatter() {}
    return ($traceurRuntime.createClass)(NumberFormatter, {}, {format: function(num, locale, style) {
        var $__3,
            $__4,
            $__5,
            $__6;
        var $__2 = arguments[3] !== (void 0) ? arguments[3] : {},
            minimumIntegerDigits = ($__3 = $__2.minimumIntegerDigits) === void 0 ? 1 : $__3,
            minimumFractionDigits = ($__4 = $__2.minimumFractionDigits) === void 0 ? 0 : $__4,
            maximumFractionDigits = ($__5 = $__2.maximumFractionDigits) === void 0 ? 3 : $__5,
            currency = $__2.currency,
            currencyAsSymbol = ($__6 = $__2.currencyAsSymbol) === void 0 ? false : $__6;
        var intlOptions = {
          minimumIntegerDigits: minimumIntegerDigits,
          minimumFractionDigits: minimumFractionDigits,
          maximumFractionDigits: maximumFractionDigits
        };
        intlOptions.style = NumberFormatStyle[style].toLowerCase();
        if (style == NumberFormatStyle.Currency) {
          intlOptions.currency = currency;
          intlOptions.currencyDisplay = currencyAsSymbol ? 'symbol' : 'code';
        }
        return new Intl.NumberFormat(locale, intlOptions).format(num);
      }});
  }();
  function digitCondition(len) {
    return len == 2 ? '2-digit' : 'numeric';
  }
  function nameCondition(len) {
    return len < 4 ? 'short' : 'long';
  }
  function extractComponents(pattern) {
    var ret = {};
    var i = 0,
        j;
    while (i < pattern.length) {
      j = i;
      while (j < pattern.length && pattern[j] == pattern[i])
        j++;
      var len = j - i;
      switch (pattern[i]) {
        case 'G':
          ret.era = nameCondition(len);
          break;
        case 'y':
          ret.year = digitCondition(len);
          break;
        case 'M':
          if (len >= 3)
            ret.month = nameCondition(len);
          else
            ret.month = digitCondition(len);
          break;
        case 'd':
          ret.day = digitCondition(len);
          break;
        case 'E':
          ret.weekday = nameCondition(len);
          break;
        case 'j':
          ret.hour = digitCondition(len);
          break;
        case 'h':
          ret.hour = digitCondition(len);
          ret.hour12 = true;
          break;
        case 'H':
          ret.hour = digitCondition(len);
          ret.hour12 = false;
          break;
        case 'm':
          ret.minute = digitCondition(len);
          break;
        case 's':
          ret.second = digitCondition(len);
          break;
        case 'z':
          ret.timeZoneName = 'long';
          break;
        case 'Z':
          ret.timeZoneName = 'short';
          break;
      }
      i = j;
    }
    return ret;
  }
  var dateFormatterCache = new Map();
  var DateFormatter = function() {
    function DateFormatter() {}
    return ($traceurRuntime.createClass)(DateFormatter, {}, {format: function(date, locale, pattern) {
        var key = locale + pattern;
        if (dateFormatterCache.has(key)) {
          return dateFormatterCache.get(key).format(date);
        }
        var formatter = new Intl.DateTimeFormat(locale, extractComponents(pattern));
        dateFormatterCache.set(key, formatter);
        return formatter.format(date);
      }});
  }();
  return {
    get NumberFormatStyle() {
      return NumberFormatStyle;
    },
    get NumberFormatter() {
      return NumberFormatter;
    },
    get DateFormatter() {
      return DateFormatter;
    }
  };
});
System.get("../../../../../../../node_modules/angular2/es6/prod/src/facade/intl.js" + '');
