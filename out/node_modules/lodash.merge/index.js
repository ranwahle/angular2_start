System.registerModule("../../../node_modules/lodash.merge/index.js", [], function() {
  "use strict";
  var __moduleName = "../../../node_modules/lodash.merge/index.js";
  var arrayCopy = require('lodash._arraycopy'),
      arrayEach = require('lodash._arrayeach'),
      createAssigner = require('lodash._createassigner'),
      isArguments = require('lodash.isarguments'),
      isArray = require('lodash.isarray'),
      isPlainObject = require('lodash.isplainobject'),
      isTypedArray = require('lodash.istypedarray'),
      keys = require('lodash.keys'),
      toPlainObject = require('lodash.toplainobject');
  function isObjectLike(value) {
    return !!value && typeof value == 'object';
  }
  var MAX_SAFE_INTEGER = 9007199254740991;
  function baseMerge(object, source, customizer, stackA, stackB) {
    if (!isObject(object)) {
      return object;
    }
    var isSrcArr = isArrayLike(source) && (isArray(source) || isTypedArray(source)),
        props = isSrcArr ? undefined : keys(source);
    arrayEach(props || source, function(srcValue, key) {
      if (props) {
        key = srcValue;
        srcValue = source[key];
      }
      if (isObjectLike(srcValue)) {
        stackA || (stackA = []);
        stackB || (stackB = []);
        baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);
      } else {
        var value = object[key],
            result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
            isCommon = result === undefined;
        if (isCommon) {
          result = srcValue;
        }
        if ((result !== undefined || (isSrcArr && !(key in object))) && (isCommon || (result === result ? (result !== value) : (value === value)))) {
          object[key] = result;
        }
      }
    });
    return object;
  }
  function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {
    var length = stackA.length,
        srcValue = source[key];
    while (length--) {
      if (stackA[length] == srcValue) {
        object[key] = stackB[length];
        return;
      }
    }
    var value = object[key],
        result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
        isCommon = result === undefined;
    if (isCommon) {
      result = srcValue;
      if (isArrayLike(srcValue) && (isArray(srcValue) || isTypedArray(srcValue))) {
        result = isArray(value) ? value : (isArrayLike(value) ? arrayCopy(value) : []);
      } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
        result = isArguments(value) ? toPlainObject(value) : (isPlainObject(value) ? value : {});
      } else {
        isCommon = false;
      }
    }
    stackA.push(srcValue);
    stackB.push(result);
    if (isCommon) {
      object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);
    } else if (result === result ? (result !== value) : (value === value)) {
      object[key] = result;
    }
  }
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }
  var getLength = baseProperty('length');
  function isArrayLike(value) {
    return value != null && isLength(getLength(value));
  }
  function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }
  function isObject(value) {
    var type = typeof value;
    return !!value && (type == 'object' || type == 'function');
  }
  var merge = createAssigner(baseMerge);
  module.exports = merge;
  return {};
});
System.get("../../../node_modules/lodash.merge/index.js" + '');
