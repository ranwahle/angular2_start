System.registerModule("../../../../../node_modules/rx/src/core/observable.js", [], function() {
  "use strict";
  var __moduleName = "../../../../../node_modules/rx/src/core/observable.js";
  var observableProto;
  var Observable = Rx.Observable = (function() {
    function Observable(subscribe) {
      if (Rx.config.longStackSupport && hasStacks) {
        try {
          throw new Error();
        } catch (e) {
          this.stack = e.stack.substring(e.stack.indexOf("\n") + 1);
        }
        var self = this;
        this._subscribe = function(observer) {
          var oldOnError = observer.onError.bind(observer);
          observer.onError = function(err) {
            makeStackTraceLong(err, self);
            oldOnError(err);
          };
          return subscribe.call(self, observer);
        };
      } else {
        this._subscribe = subscribe;
      }
    }
    observableProto = Observable.prototype;
    observableProto.subscribe = observableProto.forEach = function(observerOrOnNext, onError, onCompleted) {
      return this._subscribe(typeof observerOrOnNext === 'object' ? observerOrOnNext : observerCreate(observerOrOnNext, onError, onCompleted));
    };
    observableProto.subscribeOnNext = function(onNext, thisArg) {
      return this._subscribe(observerCreate(arguments.length === 2 ? function(x) {
        onNext.call(thisArg, x);
      } : onNext));
    };
    observableProto.subscribeOnError = function(onError, thisArg) {
      return this._subscribe(observerCreate(null, arguments.length === 2 ? function(e) {
        onError.call(thisArg, e);
      } : onError));
    };
    observableProto.subscribeOnCompleted = function(onCompleted, thisArg) {
      return this._subscribe(observerCreate(null, null, arguments.length === 2 ? function() {
        onCompleted.call(thisArg);
      } : onCompleted));
    };
    return Observable;
  })();
  return {};
});
System.get("../../../../../node_modules/rx/src/core/observable.js" + '');
