System.registerModule("../../../../../../node_modules/rx/src/core/subjects/asyncsubject.js", [], function() {
  "use strict";
  var __moduleName = "../../../../../../node_modules/rx/src/core/subjects/asyncsubject.js";
  var AsyncSubject = Rx.AsyncSubject = (function(__super__) {
    function subscribe(observer) {
      checkDisposed.call(this);
      if (!this.isStopped) {
        this.observers.push(observer);
        return new InnerSubscription(this, observer);
      }
      if (this.hasError) {
        observer.onError(this.error);
      } else if (this.hasValue) {
        observer.onNext(this.value);
        observer.onCompleted();
      } else {
        observer.onCompleted();
      }
      return disposableEmpty;
    }
    inherits(AsyncSubject, __super__);
    function AsyncSubject() {
      __super__.call(this, subscribe);
      this.isDisposed = false;
      this.isStopped = false;
      this.hasValue = false;
      this.observers = [];
      this.hasError = false;
    }
    addProperties(AsyncSubject.prototype, Observer, {
      hasObservers: function() {
        checkDisposed.call(this);
        return this.observers.length > 0;
      },
      onCompleted: function() {
        var i,
            len;
        checkDisposed.call(this);
        if (!this.isStopped) {
          this.isStopped = true;
          var os = this.observers.slice(0),
              len = os.length;
          if (this.hasValue) {
            for (i = 0; i < len; i++) {
              var o = os[i];
              o.onNext(this.value);
              o.onCompleted();
            }
          } else {
            for (i = 0; i < len; i++) {
              os[i].onCompleted();
            }
          }
          this.observers.length = 0;
        }
      },
      onError: function(error) {
        checkDisposed.call(this);
        if (!this.isStopped) {
          var os = this.observers.slice(0);
          this.isStopped = true;
          this.hasError = true;
          this.error = error;
          for (var i = 0,
              len = os.length; i < len; i++) {
            os[i].onError(error);
          }
          this.observers.length = 0;
        }
      },
      onNext: function(value) {
        checkDisposed.call(this);
        if (this.isStopped) {
          return;
        }
        this.value = value;
        this.hasValue = true;
      },
      dispose: function() {
        this.isDisposed = true;
        this.observers = null;
        this.exception = null;
        this.value = null;
      }
    });
    return AsyncSubject;
  }(Observable));
  return {};
});
System.get("../../../../../../node_modules/rx/src/core/subjects/asyncsubject.js" + '');
