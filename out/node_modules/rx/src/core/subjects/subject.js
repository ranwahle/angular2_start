System.registerModule("../../../../../../node_modules/rx/src/core/subjects/subject.js", [], function() {
  "use strict";
  var __moduleName = "../../../../../../node_modules/rx/src/core/subjects/subject.js";
  var Subject = Rx.Subject = (function(__super__) {
    function subscribe(observer) {
      checkDisposed.call(this);
      if (!this.isStopped) {
        this.observers.push(observer);
        return new InnerSubscription(this, observer);
      }
      if (this.hasError) {
        observer.onError(this.error);
        return disposableEmpty;
      }
      observer.onCompleted();
      return disposableEmpty;
    }
    inherits(Subject, __super__);
    function Subject() {
      __super__.call(this, subscribe);
      this.isDisposed = false, this.isStopped = false, this.observers = [];
      this.hasError = false;
    }
    addProperties(Subject.prototype, Observer.prototype, {
      hasObservers: function() {
        return this.observers.length > 0;
      },
      onCompleted: function() {
        checkDisposed.call(this);
        if (!this.isStopped) {
          var os = this.observers.slice(0);
          this.isStopped = true;
          for (var i = 0,
              len = os.length; i < len; i++) {
            os[i].onCompleted();
          }
          this.observers.length = 0;
        }
      },
      onError: function(error) {
        checkDisposed.call(this);
        if (!this.isStopped) {
          var os = this.observers.slice(0);
          this.isStopped = true;
          this.error = error;
          this.hasError = true;
          for (var i = 0,
              len = os.length; i < len; i++) {
            os[i].onError(error);
          }
          this.observers.length = 0;
        }
      },
      onNext: function(value) {
        checkDisposed.call(this);
        if (!this.isStopped) {
          var os = this.observers.slice(0);
          for (var i = 0,
              len = os.length; i < len; i++) {
            os[i].onNext(value);
          }
        }
      },
      dispose: function() {
        this.isDisposed = true;
        this.observers = null;
      }
    });
    Subject.create = function(observer, observable) {
      return new AnonymousSubject(observer, observable);
    };
    return Subject;
  }(Observable));
  return {};
});
System.get("../../../../../../node_modules/rx/src/core/subjects/subject.js" + '');
