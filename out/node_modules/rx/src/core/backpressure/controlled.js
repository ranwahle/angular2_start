System.registerModule("../../../../../../node_modules/rx/src/core/backpressure/controlled.js", [], function() {
  "use strict";
  var __moduleName = "../../../../../../node_modules/rx/src/core/backpressure/controlled.js";
  var ControlledObservable = (function(__super__) {
    inherits(ControlledObservable, __super__);
    function subscribe(observer) {
      return this.source.subscribe(observer);
    }
    function ControlledObservable(source, enableQueue) {
      __super__.call(this, subscribe, source);
      this.subject = new ControlledSubject(enableQueue);
      this.source = source.multicast(this.subject).refCount();
    }
    ControlledObservable.prototype.request = function(numberOfItems) {
      if (numberOfItems == null) {
        numberOfItems = -1;
      }
      return this.subject.request(numberOfItems);
    };
    return ControlledObservable;
  }(Observable));
  var ControlledSubject = (function(__super__) {
    function subscribe(observer) {
      return this.subject.subscribe(observer);
    }
    inherits(ControlledSubject, __super__);
    function ControlledSubject(enableQueue) {
      enableQueue == null && (enableQueue = true);
      __super__.call(this, subscribe);
      this.subject = new Subject();
      this.enableQueue = enableQueue;
      this.queue = enableQueue ? [] : null;
      this.requestedCount = 0;
      this.requestedDisposable = disposableEmpty;
      this.error = null;
      this.hasFailed = false;
      this.hasCompleted = false;
      this.controlledDisposable = disposableEmpty;
    }
    addProperties(ControlledSubject.prototype, Observer, {
      onCompleted: function() {
        this.hasCompleted = true;
        (!this.enableQueue || this.queue.length === 0) && this.subject.onCompleted();
      },
      onError: function(error) {
        this.hasFailed = true;
        this.error = error;
        (!this.enableQueue || this.queue.length === 0) && this.subject.onError(error);
      },
      onNext: function(value) {
        var hasRequested = false;
        if (this.requestedCount === 0) {
          this.enableQueue && this.queue.push(value);
        } else {
          (this.requestedCount !== -1 && this.requestedCount-- === 0) && this.disposeCurrentRequest();
          hasRequested = true;
        }
        hasRequested && this.subject.onNext(value);
      },
      _processRequest: function(numberOfItems) {
        if (this.enableQueue) {
          while (this.queue.length >= numberOfItems && numberOfItems > 0) {
            this.subject.onNext(this.queue.shift());
            numberOfItems--;
          }
          return this.queue.length !== 0 ? {
            numberOfItems: numberOfItems,
            returnValue: true
          } : {
            numberOfItems: numberOfItems,
            returnValue: false
          };
        }
        if (this.hasFailed) {
          this.subject.onError(this.error);
          this.controlledDisposable.dispose();
          this.controlledDisposable = disposableEmpty;
        } else if (this.hasCompleted) {
          this.subject.onCompleted();
          this.controlledDisposable.dispose();
          this.controlledDisposable = disposableEmpty;
        }
        return {
          numberOfItems: numberOfItems,
          returnValue: false
        };
      },
      request: function(number) {
        this.disposeCurrentRequest();
        var self = this,
            r = this._processRequest(number);
        var number = r.numberOfItems;
        if (!r.returnValue) {
          this.requestedCount = number;
          this.requestedDisposable = disposableCreate(function() {
            self.requestedCount = 0;
          });
          return this.requestedDisposable;
        } else {
          return disposableEmpty;
        }
      },
      disposeCurrentRequest: function() {
        this.requestedDisposable.dispose();
        this.requestedDisposable = disposableEmpty;
      }
    });
    return ControlledSubject;
  }(Observable));
  observableProto.controlled = function(enableQueue) {
    if (enableQueue == null) {
      enableQueue = true;
    }
    return new ControlledObservable(this, enableQueue);
  };
  return {};
});
System.get("../../../../../../node_modules/rx/src/core/backpressure/controlled.js" + '');
