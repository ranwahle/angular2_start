System.registerModule("../../../../../../node_modules/rx/src/core/concurrency/scheduler.js", [], function() {
  "use strict";
  var __moduleName = "../../../../../../node_modules/rx/src/core/concurrency/scheduler.js";
  var Scheduler = Rx.Scheduler = (function() {
    function Scheduler(now, schedule, scheduleRelative, scheduleAbsolute) {
      this.now = now;
      this._schedule = schedule;
      this._scheduleRelative = scheduleRelative;
      this._scheduleAbsolute = scheduleAbsolute;
    }
    function invokeAction(scheduler, action) {
      action();
      return disposableEmpty;
    }
    var schedulerProto = Scheduler.prototype;
    schedulerProto.schedule = function(action) {
      return this._schedule(action, invokeAction);
    };
    schedulerProto.scheduleWithState = function(state, action) {
      return this._schedule(state, action);
    };
    schedulerProto.scheduleWithRelative = function(dueTime, action) {
      return this._scheduleRelative(action, dueTime, invokeAction);
    };
    schedulerProto.scheduleWithRelativeAndState = function(state, dueTime, action) {
      return this._scheduleRelative(state, dueTime, action);
    };
    schedulerProto.scheduleWithAbsolute = function(dueTime, action) {
      return this._scheduleAbsolute(action, dueTime, invokeAction);
    };
    schedulerProto.scheduleWithAbsoluteAndState = function(state, dueTime, action) {
      return this._scheduleAbsolute(state, dueTime, action);
    };
    Scheduler.now = defaultNow;
    Scheduler.normalize = function(timeSpan) {
      timeSpan < 0 && (timeSpan = 0);
      return timeSpan;
    };
    return Scheduler;
  }());
  var normalizeTime = Scheduler.normalize;
  return {};
});
System.get("../../../../../../node_modules/rx/src/core/concurrency/scheduler.js" + '');
