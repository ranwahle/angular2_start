System.registerModule("../../../../../../node_modules/rx/src/core/concurrency/scheduler.recursive.js", [], function() {
  "use strict";
  var __moduleName = "../../../../../../node_modules/rx/src/core/concurrency/scheduler.recursive.js";
  (function(schedulerProto) {
    function invokeRecImmediate(scheduler, pair) {
      var state = pair.first,
          action = pair.second,
          group = new CompositeDisposable(),
          recursiveAction = function(state1) {
            action(state1, function(state2) {
              var isAdded = false,
                  isDone = false,
                  d = scheduler.scheduleWithState(state2, function(scheduler1, state3) {
                    if (isAdded) {
                      group.remove(d);
                    } else {
                      isDone = true;
                    }
                    recursiveAction(state3);
                    return disposableEmpty;
                  });
              if (!isDone) {
                group.add(d);
                isAdded = true;
              }
            });
          };
      recursiveAction(state);
      return group;
    }
    function invokeRecDate(scheduler, pair, method) {
      var state = pair.first,
          action = pair.second,
          group = new CompositeDisposable(),
          recursiveAction = function(state1) {
            action(state1, function(state2, dueTime1) {
              var isAdded = false,
                  isDone = false,
                  d = scheduler[method].call(scheduler, state2, dueTime1, function(scheduler1, state3) {
                    if (isAdded) {
                      group.remove(d);
                    } else {
                      isDone = true;
                    }
                    recursiveAction(state3);
                    return disposableEmpty;
                  });
              if (!isDone) {
                group.add(d);
                isAdded = true;
              }
            });
          };
      recursiveAction(state);
      return group;
    }
    function scheduleInnerRecursive(action, self) {
      action(function(dt) {
        self(action, dt);
      });
    }
    schedulerProto.scheduleRecursive = function(action) {
      return this.scheduleRecursiveWithState(action, function(_action, self) {
        _action(function() {
          self(_action);
        });
      });
    };
    schedulerProto.scheduleRecursiveWithState = function(state, action) {
      return this.scheduleWithState({
        first: state,
        second: action
      }, invokeRecImmediate);
    };
    schedulerProto.scheduleRecursiveWithRelative = function(dueTime, action) {
      return this.scheduleRecursiveWithRelativeAndState(action, dueTime, scheduleInnerRecursive);
    };
    schedulerProto.scheduleRecursiveWithRelativeAndState = function(state, dueTime, action) {
      return this._scheduleRelative({
        first: state,
        second: action
      }, dueTime, function(s, p) {
        return invokeRecDate(s, p, 'scheduleWithRelativeAndState');
      });
    };
    schedulerProto.scheduleRecursiveWithAbsolute = function(dueTime, action) {
      return this.scheduleRecursiveWithAbsoluteAndState(action, dueTime, scheduleInnerRecursive);
    };
    schedulerProto.scheduleRecursiveWithAbsoluteAndState = function(state, dueTime, action) {
      return this._scheduleAbsolute({
        first: state,
        second: action
      }, dueTime, function(s, p) {
        return invokeRecDate(s, p, 'scheduleWithAbsoluteAndState');
      });
    };
  }(Scheduler.prototype));
  return {};
});
System.get("../../../../../../node_modules/rx/src/core/concurrency/scheduler.recursive.js" + '');
