System.registerModule("../../../../../../node_modules/rx/src/core/testing/testscheduler.js", [], function() {
  "use strict";
  var __moduleName = "../../../../../../node_modules/rx/src/core/testing/testscheduler.js";
  Rx.TestScheduler = (function(__super__) {
    inherits(TestScheduler, __super__);
    function baseComparer(x, y) {
      return x > y ? 1 : (x < y ? -1 : 0);
    }
    function TestScheduler() {
      __super__.call(this, 0, baseComparer);
    }
    TestScheduler.prototype.scheduleAbsoluteWithState = function(state, dueTime, action) {
      dueTime <= this.clock && (dueTime = this.clock + 1);
      return __super__.prototype.scheduleAbsoluteWithState.call(this, state, dueTime, action);
    };
    TestScheduler.prototype.add = function(absolute, relative) {
      return absolute + relative;
    };
    TestScheduler.prototype.toDateTimeOffset = function(absolute) {
      return new Date(absolute).getTime();
    };
    TestScheduler.prototype.toRelative = function(timeSpan) {
      return timeSpan;
    };
    TestScheduler.prototype.startWithTiming = function(create, created, subscribed, disposed) {
      var observer = this.createObserver(),
          source,
          subscription;
      this.scheduleAbsoluteWithState(null, created, function() {
        source = create();
        return disposableEmpty;
      });
      this.scheduleAbsoluteWithState(null, subscribed, function() {
        subscription = source.subscribe(observer);
        return disposableEmpty;
      });
      this.scheduleAbsoluteWithState(null, disposed, function() {
        subscription.dispose();
        return disposableEmpty;
      });
      this.start();
      return observer;
    };
    TestScheduler.prototype.startWithDispose = function(create, disposed) {
      return this.startWithTiming(create, ReactiveTest.created, ReactiveTest.subscribed, disposed);
    };
    TestScheduler.prototype.startWithCreate = function(create) {
      return this.startWithTiming(create, ReactiveTest.created, ReactiveTest.subscribed, ReactiveTest.disposed);
    };
    TestScheduler.prototype.createHotObservable = function() {
      var messages = argsOrArray(arguments, 0);
      return new HotObservable(this, messages);
    };
    TestScheduler.prototype.createColdObservable = function() {
      var messages = argsOrArray(arguments, 0);
      return new ColdObservable(this, messages);
    };
    TestScheduler.prototype.createResolvedPromise = function(ticks, value) {
      return new MockPromise(this, [Rx.ReactiveTest.onNext(ticks, value), Rx.ReactiveTest.onCompleted(ticks)]);
    };
    TestScheduler.prototype.createRejectedPromise = function(ticks, reason) {
      return new MockPromise(this, [Rx.ReactiveTest.onError(ticks, reason)]);
    };
    TestScheduler.prototype.createObserver = function() {
      return new MockObserver(this);
    };
    return TestScheduler;
  })(VirtualTimeScheduler);
  return {};
});
System.get("../../../../../../node_modules/rx/src/core/testing/testscheduler.js" + '');
