System.registerModule("../../../../../../../node_modules/rx/src/core/linq/observable/zipproto.js", [], function() {
  "use strict";
  var __moduleName = "../../../../../../../node_modules/rx/src/core/linq/observable/zipproto.js";
  function zipArray(second, resultSelector) {
    var first = this;
    return new AnonymousObservable(function(observer) {
      var index = 0,
          len = second.length;
      return first.subscribe(function(left) {
        if (index < len) {
          var right = second[index++],
              result;
          try {
            result = resultSelector(left, right);
          } catch (e) {
            observer.onError(e);
            return;
          }
          observer.onNext(result);
        } else {
          observer.onCompleted();
        }
      }, function(e) {
        observer.onError(e);
      }, function() {
        observer.onCompleted();
      });
    }, first);
  }
  observableProto.zip = function() {
    if (Array.isArray(arguments[0])) {
      return zipArray.apply(this, arguments);
    }
    var parent = this,
        sources = slice.call(arguments),
        resultSelector = sources.pop();
    sources.unshift(parent);
    return new AnonymousObservable(function(observer) {
      var n = sources.length,
          queues = arrayInitialize(n, function() {
            return [];
          }),
          isDone = arrayInitialize(n, function() {
            return false;
          });
      function next(i) {
        var res,
            queuedValues;
        if (queues.every(function(x) {
          return x.length > 0;
        })) {
          try {
            queuedValues = queues.map(function(x) {
              return x.shift();
            });
            res = resultSelector.apply(parent, queuedValues);
          } catch (ex) {
            observer.onError(ex);
            return;
          }
          observer.onNext(res);
        } else if (isDone.filter(function(x, j) {
          return j !== i;
        }).every(identity)) {
          observer.onCompleted();
        }
      }
      ;
      function done(i) {
        isDone[i] = true;
        if (isDone.every(function(x) {
          return x;
        })) {
          observer.onCompleted();
        }
      }
      var subscriptions = new Array(n);
      for (var idx = 0; idx < n; idx++) {
        (function(i) {
          var source = sources[i],
              sad = new SingleAssignmentDisposable();
          isPromise(source) && (source = observableFromPromise(source));
          sad.setDisposable(source.subscribe(function(x) {
            queues[i].push(x);
            next(i);
          }, function(e) {
            observer.onError(e);
          }, function() {
            done(i);
          }));
          subscriptions[i] = sad;
        })(idx);
      }
      return new CompositeDisposable(subscriptions);
    }, parent);
  };
  return {};
});
System.get("../../../../../../../node_modules/rx/src/core/linq/observable/zipproto.js" + '');
