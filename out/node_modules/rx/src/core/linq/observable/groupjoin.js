System.registerModule("../../../../../../../node_modules/rx/src/core/linq/observable/groupjoin.js", [], function() {
  "use strict";
  var __moduleName = "../../../../../../../node_modules/rx/src/core/linq/observable/groupjoin.js";
  observableProto.groupJoin = function(right, leftDurationSelector, rightDurationSelector, resultSelector) {
    var left = this;
    return new AnonymousObservable(function(observer) {
      var group = new CompositeDisposable();
      var r = new RefCountDisposable(group);
      var leftMap = new Dictionary(),
          rightMap = new Dictionary();
      var leftId = 0,
          rightId = 0;
      function handleError(e) {
        return function(v) {
          v.onError(e);
        };
      }
      ;
      group.add(left.subscribe(function(value) {
        var s = new Subject();
        var id = leftId++;
        leftMap.add(id, s);
        var result;
        try {
          result = resultSelector(value, addRef(s, r));
        } catch (e) {
          leftMap.getValues().forEach(handleError(e));
          observer.onError(e);
          return;
        }
        observer.onNext(result);
        rightMap.getValues().forEach(function(v) {
          s.onNext(v);
        });
        var md = new SingleAssignmentDisposable();
        group.add(md);
        var expire = function() {
          leftMap.remove(id) && s.onCompleted();
          group.remove(md);
        };
        var duration;
        try {
          duration = leftDurationSelector(value);
        } catch (e) {
          leftMap.getValues().forEach(handleError(e));
          observer.onError(e);
          return;
        }
        md.setDisposable(duration.take(1).subscribe(noop, function(e) {
          leftMap.getValues().forEach(handleError(e));
          observer.onError(e);
        }, expire));
      }, function(e) {
        leftMap.getValues().forEach(handleError(e));
        observer.onError(e);
      }, observer.onCompleted.bind(observer)));
      group.add(right.subscribe(function(value) {
        var id = rightId++;
        rightMap.add(id, value);
        var md = new SingleAssignmentDisposable();
        group.add(md);
        var expire = function() {
          rightMap.remove(id);
          group.remove(md);
        };
        var duration;
        try {
          duration = rightDurationSelector(value);
        } catch (e) {
          leftMap.getValues().forEach(handleError(e));
          observer.onError(e);
          return;
        }
        md.setDisposable(duration.take(1).subscribe(noop, function(e) {
          leftMap.getValues().forEach(handleError(e));
          observer.onError(e);
        }, expire));
        leftMap.getValues().forEach(function(v) {
          v.onNext(value);
        });
      }, function(e) {
        leftMap.getValues().forEach(handleError(e));
        observer.onError(e);
      }));
      return r;
    }, left);
  };
  return {};
});
System.get("../../../../../../../node_modules/rx/src/core/linq/observable/groupjoin.js" + '');
