System.registerModule("../../../../../../../node_modules/rx/src/core/linq/observable/join.js", [], function() {
  "use strict";
  var __moduleName = "../../../../../../../node_modules/rx/src/core/linq/observable/join.js";
  observableProto.join = function(right, leftDurationSelector, rightDurationSelector, resultSelector) {
    var left = this;
    return new AnonymousObservable(function(observer) {
      var group = new CompositeDisposable();
      var leftDone = false,
          rightDone = false;
      var leftId = 0,
          rightId = 0;
      var leftMap = new Dictionary(),
          rightMap = new Dictionary();
      group.add(left.subscribe(function(value) {
        var id = leftId++;
        var md = new SingleAssignmentDisposable();
        leftMap.add(id, value);
        group.add(md);
        var expire = function() {
          leftMap.remove(id) && leftMap.count() === 0 && leftDone && observer.onCompleted();
          group.remove(md);
        };
        var duration;
        try {
          duration = leftDurationSelector(value);
        } catch (e) {
          observer.onError(e);
          return;
        }
        md.setDisposable(duration.take(1).subscribe(noop, observer.onError.bind(observer), expire));
        rightMap.getValues().forEach(function(v) {
          var result;
          try {
            result = resultSelector(value, v);
          } catch (exn) {
            observer.onError(exn);
            return;
          }
          observer.onNext(result);
        });
      }, observer.onError.bind(observer), function() {
        leftDone = true;
        (rightDone || leftMap.count() === 0) && observer.onCompleted();
      }));
      group.add(right.subscribe(function(value) {
        var id = rightId++;
        var md = new SingleAssignmentDisposable();
        rightMap.add(id, value);
        group.add(md);
        var expire = function() {
          rightMap.remove(id) && rightMap.count() === 0 && rightDone && observer.onCompleted();
          group.remove(md);
        };
        var duration;
        try {
          duration = rightDurationSelector(value);
        } catch (e) {
          observer.onError(e);
          return;
        }
        md.setDisposable(duration.take(1).subscribe(noop, observer.onError.bind(observer), expire));
        leftMap.getValues().forEach(function(v) {
          var result;
          try {
            result = resultSelector(v, value);
          } catch (exn) {
            observer.onError(exn);
            return;
          }
          observer.onNext(result);
        });
      }, observer.onError.bind(observer), function() {
        rightDone = true;
        (leftDone || rightMap.count() === 0) && observer.onCompleted();
      }));
      return group;
    }, left);
  };
  return {};
});
System.get("../../../../../../../node_modules/rx/src/core/linq/observable/join.js" + '');
