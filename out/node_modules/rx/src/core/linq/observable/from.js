System.registerModule("../../../../../../../node_modules/rx/src/core/linq/observable/from.js", [], function() {
  "use strict";
  var __moduleName = "../../../../../../../node_modules/rx/src/core/linq/observable/from.js";
  var maxSafeInteger = Math.pow(2, 53) - 1;
  function StringIterable(str) {
    this._s = s;
  }
  StringIterable.prototype[$iterator$] = function() {
    return new StringIterator(this._s);
  };
  function StringIterator(str) {
    this._s = s;
    this._l = s.length;
    this._i = 0;
  }
  StringIterator.prototype[$iterator$] = function() {
    return this;
  };
  StringIterator.prototype.next = function() {
    if (this._i < this._l) {
      var val = this._s.charAt(this._i++);
      return {
        done: false,
        value: val
      };
    } else {
      return doneEnumerator;
    }
  };
  function ArrayIterable(a) {
    this._a = a;
  }
  ArrayIterable.prototype[$iterator$] = function() {
    return new ArrayIterator(this._a);
  };
  function ArrayIterator(a) {
    this._a = a;
    this._l = toLength(a);
    this._i = 0;
  }
  ArrayIterator.prototype[$iterator$] = function() {
    return this;
  };
  ArrayIterator.prototype.next = function() {
    if (this._i < this._l) {
      var val = this._a[this._i++];
      return {
        done: false,
        value: val
      };
    } else {
      return doneEnumerator;
    }
  };
  function numberIsFinite(value) {
    return typeof value === 'number' && root.isFinite(value);
  }
  function isNan(n) {
    return n !== n;
  }
  function getIterable(o) {
    var i = o[$iterator$],
        it;
    if (!i && typeof o === 'string') {
      it = new StringIterable(o);
      return it[$iterator$]();
    }
    if (!i && o.length !== undefined) {
      it = new ArrayIterable(o);
      return it[$iterator$]();
    }
    if (!i) {
      throw new TypeError('Object is not iterable');
    }
    return o[$iterator$]();
  }
  function sign(value) {
    var number = +value;
    if (number === 0) {
      return number;
    }
    if (isNaN(number)) {
      return number;
    }
    return number < 0 ? -1 : 1;
  }
  function toLength(o) {
    var len = +o.length;
    if (isNaN(len)) {
      return 0;
    }
    if (len === 0 || !numberIsFinite(len)) {
      return len;
    }
    len = sign(len) * Math.floor(Math.abs(len));
    if (len <= 0) {
      return 0;
    }
    if (len > maxSafeInteger) {
      return maxSafeInteger;
    }
    return len;
  }
  var observableFrom = Observable.from = function(iterable, mapFn, thisArg, scheduler) {
    if (iterable == null) {
      throw new Error('iterable cannot be null.');
    }
    if (mapFn && !isFunction(mapFn)) {
      throw new Error('mapFn when provided must be a function');
    }
    if (mapFn) {
      var mapper = bindCallback(mapFn, thisArg, 2);
    }
    isScheduler(scheduler) || (scheduler = currentThreadScheduler);
    var list = Object(iterable),
        it = getIterable(list);
    return new AnonymousObservable(function(observer) {
      var i = 0;
      return scheduler.scheduleRecursive(function(self) {
        var next;
        try {
          next = it.next();
        } catch (e) {
          observer.onError(e);
          return;
        }
        if (next.done) {
          observer.onCompleted();
          return;
        }
        var result = next.value;
        if (mapper) {
          try {
            result = mapper(result, i);
          } catch (e) {
            observer.onError(e);
            return;
          }
        }
        observer.onNext(result);
        i++;
        self();
      });
    });
  };
  return {};
});
System.get("../../../../../../../node_modules/rx/src/core/linq/observable/from.js" + '');
