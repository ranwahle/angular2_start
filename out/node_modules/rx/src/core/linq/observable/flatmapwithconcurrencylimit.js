System.registerModule("../../../../../../../node_modules/rx/src/core/linq/observable/flatmapwithconcurrencylimit.js", [], function() {
  "use strict";
  var __moduleName = "../../../../../../../node_modules/rx/src/core/linq/observable/flatmapwithconcurrencylimit.js";
  function flatMapWithMaxConcurrent(source, maxConcurrent, selector, thisArg) {
    return source.map(function(x, i) {
      var result = selector.call(thisArg, x, i);
      isPromise(result) && (result = observableFromPromise(result));
      (isArrayLike(result) || isIterable(result)) && (result = observableFrom(result));
      return result;
    }).merge(maxConcurrent);
  }
  observableProto.selectManyWithMaxConcurrent = observableProto.flatMapWithMaxConcurrent = function(maxConcurrent, selector, resultSelector, thisArg) {
    if (isFunction(selector) && isFunction(resultSelector)) {
      return this.flatMapWithMaxConcurrent(maxConcurrent, function(x, i) {
        var selectorResult = selector(x, i);
        isPromise(selectorResult) && (selectorResult = observableFromPromise(selectorResult));
        (isArrayLike(selectorResult) || isIterable(selectorResult)) && (selectorResult = observableFrom(selectorResult));
        return selectorResult.map(function(y) {
          return resultSelector(x, y, i);
        });
      }, thisArg);
    }
    return isFunction(selector) ? flatMapWithMaxConcurrent(this, maxConcurrent, selector, thisArg) : flatMapWithMaxConcurrent(this, maxConcurrent, function() {
      return selector;
    });
  };
  return {};
});
System.get("../../../../../../../node_modules/rx/src/core/linq/observable/flatmapwithconcurrencylimit.js" + '');
