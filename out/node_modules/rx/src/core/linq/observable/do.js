System.registerModule("../../../../../../../node_modules/rx/src/core/linq/observable/do.js", [], function() {
  "use strict";
  var __moduleName = "../../../../../../../node_modules/rx/src/core/linq/observable/do.js";
  observableProto['do'] = observableProto.tap = function(observerOrOnNext, onError, onCompleted) {
    var source = this,
        onNextFunc;
    if (typeof observerOrOnNext === 'function') {
      onNextFunc = observerOrOnNext;
    } else {
      onNextFunc = function(x) {
        observerOrOnNext.onNext(x);
      };
      onError = function(e) {
        observerOrOnNext.onError(e);
      };
      onCompleted = function() {
        observerOrOnNext.onCompleted();
      };
    }
    return new AnonymousObservable(function(observer) {
      return source.subscribe(function(x) {
        try {
          onNextFunc(x);
        } catch (e) {
          observer.onError(e);
        }
        observer.onNext(x);
      }, function(err) {
        if (onError) {
          try {
            onError(err);
          } catch (e) {
            observer.onError(e);
          }
        }
        observer.onError(err);
      }, function() {
        if (onCompleted) {
          try {
            onCompleted();
          } catch (e) {
            observer.onError(e);
          }
        }
        observer.onCompleted();
      });
    }, this);
  };
  observableProto.doAction = function() {
    return this.tap.apply(this, arguments);
  };
  observableProto.doOnNext = observableProto.tapOnNext = function(onNext, thisArg) {
    return this.tap(typeof thisArg !== 'undefined' ? function(x) {
      onNext.call(thisArg, x);
    } : onNext);
  };
  observableProto.doOnError = observableProto.tapOnError = function(onError, thisArg) {
    return this.tap(noop, typeof thisArg !== 'undefined' ? function(e) {
      onError.call(thisArg, e);
    } : onError);
  };
  observableProto.doOnCompleted = observableProto.tapOnCompleted = function(onCompleted, thisArg) {
    return this.tap(noop, null, typeof thisArg !== 'undefined' ? function() {
      onCompleted.call(thisArg);
    } : onCompleted);
  };
  return {};
});
System.get("../../../../../../../node_modules/rx/src/core/linq/observable/do.js" + '');
