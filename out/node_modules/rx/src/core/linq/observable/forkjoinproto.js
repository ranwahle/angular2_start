System.registerModule("../../../../../../../node_modules/rx/src/core/linq/observable/forkjoinproto.js", [], function() {
  "use strict";
  var __moduleName = "../../../../../../../node_modules/rx/src/core/linq/observable/forkjoinproto.js";
  observableProto.forkJoin = function(second, resultSelector) {
    var first = this;
    return new AnonymousObservable(function(observer) {
      var leftStopped = false,
          rightStopped = false,
          hasLeft = false,
          hasRight = false,
          lastLeft,
          lastRight,
          leftSubscription = new SingleAssignmentDisposable(),
          rightSubscription = new SingleAssignmentDisposable();
      isPromise(second) && (second = observableFromPromise(second));
      leftSubscription.setDisposable(first.subscribe(function(left) {
        hasLeft = true;
        lastLeft = left;
      }, function(err) {
        rightSubscription.dispose();
        observer.onError(err);
      }, function() {
        leftStopped = true;
        if (rightStopped) {
          if (!hasLeft) {
            observer.onCompleted();
          } else if (!hasRight) {
            observer.onCompleted();
          } else {
            var result;
            try {
              result = resultSelector(lastLeft, lastRight);
            } catch (e) {
              observer.onError(e);
              return;
            }
            observer.onNext(result);
            observer.onCompleted();
          }
        }
      }));
      rightSubscription.setDisposable(second.subscribe(function(right) {
        hasRight = true;
        lastRight = right;
      }, function(err) {
        leftSubscription.dispose();
        observer.onError(err);
      }, function() {
        rightStopped = true;
        if (leftStopped) {
          if (!hasLeft) {
            observer.onCompleted();
          } else if (!hasRight) {
            observer.onCompleted();
          } else {
            var result;
            try {
              result = resultSelector(lastLeft, lastRight);
            } catch (e) {
              observer.onError(e);
              return;
            }
            observer.onNext(result);
            observer.onCompleted();
          }
        }
      }));
      return new CompositeDisposable(leftSubscription, rightSubscription);
    }, first);
  };
  return {};
});
System.get("../../../../../../../node_modules/rx/src/core/linq/observable/forkjoinproto.js" + '');
