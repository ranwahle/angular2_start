System.registerModule("../../../../../../../node_modules/rx/src/core/linq/observable/fromevent-modern.js", [], function() {
  "use strict";
  var __moduleName = "../../../../../../../node_modules/rx/src/core/linq/observable/fromevent-modern.js";
  function createListener(element, name, handler) {
    if (element.addEventListener) {
      element.addEventListener(name, handler, false);
      return disposableCreate(function() {
        element.removeEventListener(name, handler, false);
      });
    }
    throw new Error('No listener found');
  }
  function createEventListener(el, eventName, handler) {
    var disposables = new CompositeDisposable();
    if (Object.prototype.toString.call(el) === '[object NodeList]') {
      for (var i = 0,
          len = el.length; i < len; i++) {
        disposables.add(createEventListener(el.item(i), eventName, handler));
      }
    } else if (el) {
      disposables.add(createListener(el, eventName, handler));
    }
    return disposables;
  }
  Rx.config.useNativeEvents = false;
  Observable.fromEvent = function(element, eventName, selector) {
    if (element.addListener) {
      return fromEventPattern(function(h) {
        element.addListener(eventName, h);
      }, function(h) {
        element.removeListener(eventName, h);
      }, selector);
    }
    if (!Rx.config.useNativeEvents) {
      if (typeof element.on === 'function' && typeof element.off === 'function') {
        return fromEventPattern(function(h) {
          element.on(eventName, h);
        }, function(h) {
          element.off(eventName, h);
        }, selector);
      }
      if (!!root.Ember && typeof root.Ember.addListener === 'function') {
        return fromEventPattern(function(h) {
          Ember.addListener(element, eventName, h);
        }, function(h) {
          Ember.removeListener(element, eventName, h);
        }, selector);
      }
    }
    return new AnonymousObservable(function(observer) {
      return createEventListener(element, eventName, function handler(e) {
        var results = e;
        if (selector) {
          try {
            results = selector(arguments);
          } catch (err) {
            observer.onError(err);
            return;
          }
        }
        observer.onNext(results);
      });
    }).publish().refCount();
  };
  return {};
});
System.get("../../../../../../../node_modules/rx/src/core/linq/observable/fromevent-modern.js" + '');
