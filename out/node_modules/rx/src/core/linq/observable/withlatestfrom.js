System.registerModule("../../../../../../../node_modules/rx/src/core/linq/observable/withlatestfrom.js", [], function() {
  "use strict";
  var __moduleName = "../../../../../../../node_modules/rx/src/core/linq/observable/withlatestfrom.js";
  observableProto.withLatestFrom = function() {
    var source = this;
    var args = slice.call(arguments);
    var resultSelector = args.pop();
    if (typeof source === 'undefined') {
      throw new Error('Source observable not found for withLatestFrom().');
    }
    if (typeof resultSelector !== 'function') {
      throw new Error('withLatestFrom() expects a resultSelector function.');
    }
    if (Array.isArray(args[0])) {
      args = args[0];
    }
    return new AnonymousObservable(function(observer) {
      var falseFactory = function() {
        return false;
      },
          n = args.length,
          hasValue = arrayInitialize(n, falseFactory),
          hasValueAll = false,
          values = new Array(n);
      var subscriptions = new Array(n + 1);
      for (var idx = 0; idx < n; idx++) {
        (function(i) {
          var other = args[i],
              sad = new SingleAssignmentDisposable();
          isPromise(other) && (other = observableFromPromise(other));
          sad.setDisposable(other.subscribe(function(x) {
            values[i] = x;
            hasValue[i] = true;
            hasValueAll = hasValue.every(identity);
          }, observer.onError.bind(observer), function() {}));
          subscriptions[i] = sad;
        }(idx));
      }
      var sad = new SingleAssignmentDisposable();
      sad.setDisposable(source.subscribe(function(x) {
        var res;
        var allValues = [x].concat(values);
        if (!hasValueAll)
          return;
        try {
          res = resultSelector.apply(null, allValues);
        } catch (ex) {
          observer.onError(ex);
          return;
        }
        observer.onNext(res);
      }, observer.onError.bind(observer), function() {
        observer.onCompleted();
      }));
      subscriptions[n] = sad;
      return new CompositeDisposable(subscriptions);
    }, this);
  };
  return {};
});
System.get("../../../../../../../node_modules/rx/src/core/linq/observable/withlatestfrom.js" + '');
