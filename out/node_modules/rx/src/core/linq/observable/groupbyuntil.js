System.registerModule("../../../../../../../node_modules/rx/src/core/linq/observable/groupbyuntil.js", [], function() {
  "use strict";
  var __moduleName = "../../../../../../../node_modules/rx/src/core/linq/observable/groupbyuntil.js";
  observableProto.groupByUntil = function(keySelector, elementSelector, durationSelector, comparer) {
    var source = this;
    elementSelector || (elementSelector = identity);
    comparer || (comparer = defaultComparer);
    return new AnonymousObservable(function(observer) {
      function handleError(e) {
        return function(item) {
          item.onError(e);
        };
      }
      var map = new Dictionary(0, comparer),
          groupDisposable = new CompositeDisposable(),
          refCountDisposable = new RefCountDisposable(groupDisposable);
      groupDisposable.add(source.subscribe(function(x) {
        var key;
        try {
          key = keySelector(x);
        } catch (e) {
          map.getValues().forEach(handleError(e));
          observer.onError(e);
          return;
        }
        var fireNewMapEntry = false,
            writer = map.tryGetValue(key);
        if (!writer) {
          writer = new Subject();
          map.set(key, writer);
          fireNewMapEntry = true;
        }
        if (fireNewMapEntry) {
          var group = new GroupedObservable(key, writer, refCountDisposable),
              durationGroup = new GroupedObservable(key, writer);
          try {
            duration = durationSelector(durationGroup);
          } catch (e) {
            map.getValues().forEach(handleError(e));
            observer.onError(e);
            return;
          }
          observer.onNext(group);
          var md = new SingleAssignmentDisposable();
          groupDisposable.add(md);
          var expire = function() {
            map.remove(key) && writer.onCompleted();
            groupDisposable.remove(md);
          };
          md.setDisposable(duration.take(1).subscribe(noop, function(exn) {
            map.getValues().forEach(handleError(exn));
            observer.onError(exn);
          }, expire));
        }
        var element;
        try {
          element = elementSelector(x);
        } catch (e) {
          map.getValues().forEach(handleError(e));
          observer.onError(e);
          return;
        }
        writer.onNext(element);
      }, function(ex) {
        map.getValues().forEach(handleError(ex));
        observer.onError(ex);
      }, function() {
        map.getValues().forEach(function(item) {
          item.onCompleted();
        });
        observer.onCompleted();
      }));
      return refCountDisposable;
    }, source);
  };
  return {};
});
System.get("../../../../../../../node_modules/rx/src/core/linq/observable/groupbyuntil.js" + '');
