System.registerModule("../../../../../../../node_modules/rx/src/core/linq/observable/manyselect.js", [], function() {
  "use strict";
  var __moduleName = "../../../../../../../node_modules/rx/src/core/linq/observable/manyselect.js";
  observableProto.manySelect = function(selector, scheduler) {
    isScheduler(scheduler) || (scheduler = immediateScheduler);
    var source = this;
    return observableDefer(function() {
      var chain;
      return source.map(function(x) {
        var curr = new ChainObservable(x);
        chain && chain.onNext(x);
        chain = curr;
        return curr;
      }).tap(noop, function(e) {
        chain && chain.onError(e);
      }, function() {
        chain && chain.onCompleted();
      }).observeOn(scheduler).map(selector);
    }, source);
  };
  var ChainObservable = (function(__super__) {
    function subscribe(observer) {
      var self = this,
          g = new CompositeDisposable();
      g.add(currentThreadScheduler.schedule(function() {
        observer.onNext(self.head);
        g.add(self.tail.mergeAll().subscribe(observer));
      }));
      return g;
    }
    inherits(ChainObservable, __super__);
    function ChainObservable(head) {
      __super__.call(this, subscribe);
      this.head = head;
      this.tail = new AsyncSubject();
    }
    addProperties(ChainObservable.prototype, Observer, {
      onCompleted: function() {
        this.onNext(Observable.empty());
      },
      onError: function(e) {
        this.onNext(Observable.throwException(e));
      },
      onNext: function(v) {
        this.tail.onNext(v);
        this.tail.onCompleted();
      }
    });
    return ChainObservable;
  }(Observable));
  return {};
});
System.get("../../../../../../../node_modules/rx/src/core/linq/observable/manyselect.js" + '');
