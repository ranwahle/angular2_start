System.registerModule("../../../../../../../node_modules/rx/src/core/linq/observable/fromevent.js", [], function() {
  "use strict";
  var __moduleName = "../../../../../../../node_modules/rx/src/core/linq/observable/fromevent.js";
  function fixEvent(event) {
    var stopPropagation = function() {
      this.cancelBubble = true;
    };
    var preventDefault = function() {
      this.bubbledKeyCode = this.keyCode;
      if (this.ctrlKey) {
        try {
          this.keyCode = 0;
        } catch (e) {}
      }
      this.defaultPrevented = true;
      this.returnValue = false;
      this.modified = true;
    };
    event || (event = root.event);
    if (!event.target) {
      event.target = event.target || event.srcElement;
      if (event.type == 'mouseover') {
        event.relatedTarget = event.fromElement;
      }
      if (event.type == 'mouseout') {
        event.relatedTarget = event.toElement;
      }
      if (!event.stopPropagation) {
        event.stopPropagation = stopPropagation;
        event.preventDefault = preventDefault;
      }
      switch (event.type) {
        case 'keypress':
          var c = ('charCode' in event ? event.charCode : event.keyCode);
          if (c == 10) {
            c = 0;
            event.keyCode = 13;
          } else if (c == 13 || c == 27) {
            c = 0;
          } else if (c == 3) {
            c = 99;
          }
          event.charCode = c;
          event.keyChar = event.charCode ? String.fromCharCode(event.charCode) : '';
          break;
      }
    }
    return event;
  }
  function createListener(element, name, handler) {
    if (element.addEventListener) {
      element.addEventListener(name, handler, false);
      return disposableCreate(function() {
        element.removeEventListener(name, handler, false);
      });
    }
    if (element.attachEvent) {
      var innerHandler = function(event) {
        handler(fixEvent(event));
      };
      element.attachEvent('on' + name, innerHandler);
      return disposableCreate(function() {
        element.detachEvent('on' + name, innerHandler);
      });
    }
    element['on' + name] = handler;
    return disposableCreate(function() {
      element['on' + name] = null;
    });
  }
  function createEventListener(el, eventName, handler) {
    var disposables = new CompositeDisposable();
    if (Object.prototype.toString.call(el) === '[object NodeList]') {
      for (var i = 0,
          len = el.length; i < len; i++) {
        disposables.add(createEventListener(el.item(i), eventName, handler));
      }
    } else if (el) {
      disposables.add(createListener(el, eventName, handler));
    }
    return disposables;
  }
  Rx.config.useNativeEvents = false;
  Observable.fromEvent = function(element, eventName, selector) {
    if (element.addListener) {
      return fromEventPattern(function(h) {
        element.addListener(eventName, h);
      }, function(h) {
        element.removeListener(eventName, h);
      }, selector);
    }
    if (!Rx.config.useNativeEvents) {
      if (typeof element.on === 'function' && typeof element.off === 'function') {
        return fromEventPattern(function(h) {
          element.on(eventName, h);
        }, function(h) {
          element.off(eventName, h);
        }, selector);
      }
      if (!!root.Ember && typeof root.Ember.addListener === 'function') {
        return fromEventPattern(function(h) {
          Ember.addListener(element, eventName, h);
        }, function(h) {
          Ember.removeListener(element, eventName, h);
        }, selector);
      }
    }
    return new AnonymousObservable(function(observer) {
      return createEventListener(element, eventName, function handler(e) {
        var results = e;
        if (selector) {
          try {
            results = selector(arguments);
          } catch (err) {
            observer.onError(err);
            return;
          }
        }
        observer.onNext(results);
      });
    }).publish().refCount();
  };
  return {};
});
System.get("../../../../../../../node_modules/rx/src/core/linq/observable/fromevent.js" + '');
