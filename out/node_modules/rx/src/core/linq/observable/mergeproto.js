System.registerModule("../../../../../../../node_modules/rx/src/core/linq/observable/mergeproto.js", [], function() {
  "use strict";
  var __moduleName = "../../../../../../../node_modules/rx/src/core/linq/observable/mergeproto.js";
  observableProto.merge = function(maxConcurrentOrOther) {
    if (typeof maxConcurrentOrOther !== 'number') {
      return observableMerge(this, maxConcurrentOrOther);
    }
    var sources = this;
    return new AnonymousObservable(function(o) {
      var activeCount = 0,
          group = new CompositeDisposable(),
          isStopped = false,
          q = [];
      function subscribe(xs) {
        var subscription = new SingleAssignmentDisposable();
        group.add(subscription);
        isPromise(xs) && (xs = observableFromPromise(xs));
        subscription.setDisposable(xs.subscribe(function(x) {
          o.onNext(x);
        }, function(e) {
          o.onError(e);
        }, function() {
          group.remove(subscription);
          if (q.length > 0) {
            subscribe(q.shift());
          } else {
            activeCount--;
            isStopped && activeCount === 0 && o.onCompleted();
          }
        }));
      }
      group.add(sources.subscribe(function(innerSource) {
        if (activeCount < maxConcurrentOrOther) {
          activeCount++;
          subscribe(innerSource);
        } else {
          q.push(innerSource);
        }
      }, function(e) {
        o.onError(e);
      }, function() {
        isStopped = true;
        activeCount === 0 && o.onCompleted();
      }));
      return group;
    }, sources);
  };
  return {};
});
System.get("../../../../../../../node_modules/rx/src/core/linq/observable/mergeproto.js" + '');
