System.registerModule("../../../node_modules/rx/index.js", [], function() {
  "use strict";
  var __moduleName = "../../../node_modules/rx/index.js";
  var Rx = require('./dist/rx.all');
  require('./dist/rx.sorting');
  require('./dist/rx.testing');
  var EventEmitter = require('events').EventEmitter,
      Observable = Rx.Observable;
  Rx.Node = {
    fromCallback: function(func, context, selector) {
      return Observable.fromCallback(func, context, selector);
    },
    fromNodeCallback: function(func, context, selector) {
      return Observable.fromNodeCallback(func, context, selector);
    },
    fromEvent: function(eventEmitter, eventName, selector) {
      return Observable.fromEvent(eventEmitter, eventName, selector);
    },
    toEventEmitter: function(observable, eventName, selector) {
      var e = new EventEmitter();
      e.publish = function() {
        e.subscription = observable.subscribe(function(x) {
          var result = x;
          if (selector) {
            try {
              result = selector(x);
            } catch (e) {
              e.emit('error', e);
              return;
            }
          }
          e.emit(eventName, result);
        }, function(err) {
          e.emit('error', err);
        }, function() {
          e.emit('end');
        });
      };
      return e;
    },
    fromStream: function(stream, finishEventName) {
      stream.pause();
      finishEventName || (finishEventName = 'end');
      return Observable.create(function(observer) {
        function dataHandler(data) {
          observer.onNext(data);
        }
        function errorHandler(err) {
          observer.onError(err);
        }
        function endHandler() {
          observer.onCompleted();
        }
        stream.addListener('data', dataHandler);
        stream.addListener('error', errorHandler);
        stream.addListener(finishEventName, endHandler);
        stream.resume();
        return function() {
          stream.removeListener('data', dataHandler);
          stream.removeListener('error', errorHandler);
          stream.removeListener(finishEventName, endHandler);
        };
      }).publish().refCount();
    },
    fromReadableStream: function(stream) {
      return this.fromStream(stream, 'end');
    },
    fromWritableStream: function(stream) {
      return this.fromStream(stream, 'finish');
    },
    fromTransformStream: function(stream) {
      return this.fromStream(stream, 'finish');
    },
    writeToStream: function(observable, stream, encoding) {
      var source = observable.pausableBuffered();
      function onDrain() {
        source.resume();
      }
      stream.addListener('drain', onDrain);
      return source.subscribe(function(x) {
        !stream.write(String(x), encoding) && source.pause();
      }, function(err) {
        stream.emit('error', err);
      }, function() {
        !stream._isStdio && stream.end();
        stream.removeListener('drain', onDrain);
      });
      source.resume();
    }
  };
  Rx.Observable.prototype.pipe = function(dest) {
    var source = this.pausableBuffered();
    function onDrain() {
      source.resume();
    }
    dest.addListener('drain', onDrain);
    source.subscribe(function(x) {
      !dest.write(String(x)) && source.pause();
    }, function(err) {
      dest.emit('error', err);
    }, function() {
      !dest._isStdio && dest.end();
      dest.removeListener('drain', onDrain);
    });
    source.resume();
    return dest;
  };
  module.exports = Rx;
  return {};
});
System.get("../../../node_modules/rx/index.js" + '');
