System.registerModule("../../../../node_modules/foxy/lib/server.js", [], function() {
  "use strict";
  var __moduleName = "../../../../node_modules/foxy/lib/server.js";
  var utils = require("./utils");
  var respMod = require("resp-modifier");
  var connect = require("connect");
  var httpProxy = require("http-proxy");
  var merge = require("lodash.merge");
  function Foxy(config) {
    var foxy = this;
    foxy.config = config;
    foxy.app = (function() {
      var app = connect();
      foxy.config.middleware.forEach(function(mw) {
        app.use(mw);
      });
      var proxy = httpProxy.createProxyServer(merge(foxy.config.proxyOptions, {
        target: foxy.config.target,
        headers: foxy.config.reqHeaders(foxy.config)
      }));
      proxy.on("error", foxy.config.errHandler);
      proxy.on("proxyRes", utils.proxyRes(foxy.config));
      app.handleUpgrade = function(req, socket, head) {
        proxy.ws(req, socket, head);
      };
      app.stack.push({
        route: "",
        id: "foxy-resp-mod",
        handle: finalhandler
      });
      var mwCount = 0;
      app.use = function(path, fn, opts) {
        opts = opts || {};
        if (typeof path !== "string") {
          fn = path;
          path = "";
        }
        if (path === "*") {
          path = "";
        }
        if (!opts.id) {
          opts.id = "foxy-mw-" + (mwCount += 1);
        }
        app.stack.splice(app.stack.length - 1, 0, {
          route: path,
          handle: fn,
          id: opts.id
        });
      };
      function finalhandler(req, res) {
        respMod({
          rules: utils.getRules(foxy.config, req.headers.host),
          blacklist: foxy.config.blacklist,
          whitelist: foxy.config.whitelist
        })(req, res, function() {
          proxy.web(req, res);
        });
      }
      return app;
    })();
    return foxy;
  }
  module.exports = Foxy;
  return {};
});
System.get("../../../../node_modules/foxy/lib/server.js" + '');
