System.registerModule("../../../../node_modules/foxy/lib/utils.js", [], function() {
  "use strict";
  var __moduleName = "../../../../node_modules/foxy/lib/utils.js";
  var url = require("url");
  var path = require("path");
  var excludeList = require("./exclude");
  var utils = exports;
  utils.removeExcludedHeaders = function removeHeaders(res, req, config) {
    config.excludedHeaders.forEach(function(item) {
      if (res.headers.hasOwnProperty(item)) {
        delete res.headers[item];
      }
    });
  };
  utils.getProxyHost = function getProxyHost(opts) {
    if (opts.port && opts.port !== 80) {
      return opts.hostname + ":" + opts.port;
    }
    return opts.hostname;
  };
  utils.rewriteCookies = function rewriteCookies(rawCookie) {
    var objCookie = (function() {
      var obj = {};
      var pairs = rawCookie.split(/; */);
      pairs.forEach(function(pair) {
        var eqIndex = pair.indexOf("=");
        if (eqIndex < 0) {
          return;
        }
        var key = pair.substr(0, eqIndex).trim();
        obj[key] = pair.substr(eqIndex + 1, pair.length).trim();
      });
      return obj;
    })();
    var pairs = Object.keys(objCookie).filter(function(item) {
      return item !== "domain";
    }).map(function(key) {
      return key + "=" + objCookie[key];
    });
    if (rawCookie.match(/httponly/i)) {
      pairs.push("HttpOnly");
    }
    return pairs.join("; ");
  };
  utils.rewriteLinks = function rewriteLinks(userServer, proxyUrl) {
    var host = userServer.hostname;
    var string = host;
    var port = userServer.port;
    if (host && port) {
      if (parseInt(port, 10) !== 80) {
        string = host + ":" + port;
      }
    }
    return {
      match: new RegExp("https?://" + string + "(\/)?|('|\")(https?://|/|\\.)?" + string + "(\/)?(.*?)(?=[ ,'\"\\s])", "g"),
      fn: function(match) {
        if (match[0] === ".") {
          return match;
        }
        var captured = match[0] === "'" || match[0] === "\"" ? match[0] : "";
        var pre = "//";
        if (match[0] === "'" || match[0] === "\"") {
          match = match.slice(1);
        }
        var out = url.parse(match);
        if (!out.host) {
          string = string.replace(/^(\/)/, "");
          return captured + match.replace(string, proxyUrl);
        }
        if (out.path === "/") {
          if (match.slice(-1) === "/") {
            out.path = "/";
          } else {
            out.path = "";
          }
        }
        return [captured, pre, proxyUrl, out.path || "", out.hash || ""].join("");
      }
    };
  };
  utils.handleIe = function handleIe(req, res, next) {
    var ua = req.headers["user-agent"];
    var match = /MSIE (\d)\.\d/.exec(ua);
    if (match) {
      if (parseInt(match[1], 10) < 9) {
        var parsed = url.parse(req.url);
        var ext = path.extname(parsed.pathname);
        var excluded = excludeList.some(function(item) {
          return item === ext;
        });
        if (!excluded) {
          req.headers["accept"] = "text/html";
        }
      }
    }
    next();
    return req;
  };
  utils.getRules = function getRules(config, host) {
    var rules = [];
    if (config.rules && config.rules.length) {
      var conf = config.rules;
      if (!Array.isArray(conf)) {
        conf = [conf];
      }
      conf.forEach(function(item) {
        rules.push(item);
      });
    }
    rules.push(utils.rewriteLinks(config.urlObj, host));
    return rules;
  };
  utils.checkCookies = function checkCookies(res, req, config) {
    if (typeof(res.headers["set-cookie"]) !== "undefined") {
      if (config.cookies && config.cookies.stripDomain) {
        res.headers["set-cookie"] = res.headers["set-cookie"].map(function(item) {
          return utils.rewriteCookies(item);
        });
      }
    }
  };
  var redirectRegex = /^30(1|2|7|8)$/;
  utils.handleRedirect = function handleRedirect(proxyRes, req, config) {
    var whitelist = [config.urlObj.host, req.headers.host];
    if (proxyRes.headers["location"] && redirectRegex.test(proxyRes.statusCode)) {
      var u = url.parse(proxyRes.headers["location"]);
      if (whitelist.indexOf(u.host) > -1) {
        u.host = req.headers.host;
        proxyRes.headers["location"] = u.format();
      }
    }
  };
  utils.proxyRes = function proxyRes(config) {
    return function(res, req) {
      config.proxyRes.forEach(function(func) {
        func(res, req, config);
      });
    };
  };
  return {};
});
System.get("../../../../node_modules/foxy/lib/utils.js" + '');
