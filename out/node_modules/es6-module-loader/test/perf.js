System.registerModule("../../../../node_modules/es6-module-loader/test/perf.js", [], function() {
  "use strict";
  var __moduleName = "../../../../node_modules/es6-module-loader/test/perf.js";
  var NUM_MODULES = 1000;
  System.set('module0', System.newModule({}));
  function instantiateAtDepth(treeDepth) {
    return function(load) {
      var num = parseInt(load.name.substr(6));
      var deps = [];
      if (num == NUM_MODULES) {
        for (var i = 0; i < NUM_MODULES; i += treeDepth)
          deps.push('module' + i);
      } else if (num % treeDepth != treeDepth - 1)
        deps = ['module' + (num + 1)];
      return {
        deps: deps,
        execute: function() {
          eval(load.source);
          return System.newModule({});
        }
      };
    };
  }
  function hundredModulesBench(treeDepth) {
    benchmark('hundred modules depth ' + treeDepth, function(deferred) {
      var range = Array.apply(null, {length: NUM_MODULES});
      Promise.all(range.map(function(_, i) {
        if (!i)
          return;
        return System.define('module' + i, "function q() {} var p = 5;\n // non-trivial code");
      })).then(function() {
        return System.import('module' + (NUM_MODULES - 1));
      }).then(function() {
        return Promise.all(range.map(function(_, i) {
          if (!i)
            return;
          return System.delete('module' + i);
        }));
      }).then(function() {
        deferred.resolve();
      }).catch(function(e) {
        setTimeout(function() {
          throw e;
        });
      });
      ;
    }, {
      defer: true,
      timeout: false,
      setup: function() {
        System.instantiate = instantiateAtDepth(treeDepth);
      }
    });
  }
  suite('System', function() {
    hundredModulesBench(1);
    hundredModulesBench(10);
    hundredModulesBench(50);
    hundredModulesBench(100);
    hundredModulesBench(500);
    hundredModulesBench(1000);
  });
  return {};
});
System.get("../../../../node_modules/es6-module-loader/test/perf.js" + '');
