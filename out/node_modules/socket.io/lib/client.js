System.registerModule("../../../../node_modules/socket.io/lib/client.js", [], function() {
  "use strict";
  var __moduleName = "../../../../node_modules/socket.io/lib/client.js";
  var parser = require('socket.io-parser');
  var debug = require('debug')('socket.io:client');
  module.exports = Client;
  function Client(server, conn) {
    this.server = server;
    this.conn = conn;
    this.encoder = new parser.Encoder();
    this.decoder = new parser.Decoder();
    this.id = conn.id;
    this.request = conn.request;
    this.setup();
    this.sockets = [];
    this.nsps = {};
    this.connectBuffer = [];
  }
  Client.prototype.setup = function() {
    this.onclose = this.onclose.bind(this);
    this.ondata = this.ondata.bind(this);
    this.onerror = this.onerror.bind(this);
    this.ondecoded = this.ondecoded.bind(this);
    this.decoder.on('decoded', this.ondecoded);
    this.conn.on('data', this.ondata);
    this.conn.on('error', this.onerror);
    this.conn.on('close', this.onclose);
  };
  Client.prototype.connect = function(name) {
    debug('connecting to namespace %s', name);
    if (!this.server.nsps[name]) {
      this.packet({
        type: parser.ERROR,
        nsp: name,
        data: 'Invalid namespace'
      });
      return;
    }
    var nsp = this.server.of(name);
    if ('/' != name && !this.nsps['/']) {
      this.connectBuffer.push(name);
      return;
    }
    var self = this;
    var socket = nsp.add(this, function() {
      self.sockets.push(socket);
      self.nsps[nsp.name] = socket;
      if ('/' == nsp.name && self.connectBuffer.length > 0) {
        self.connectBuffer.forEach(self.connect, self);
        self.connectBuffer = [];
      }
    });
  };
  Client.prototype.disconnect = function() {
    var socket;
    while (socket = this.sockets.shift()) {
      socket.disconnect();
    }
    this.close();
  };
  Client.prototype.remove = function(socket) {
    var i = this.sockets.indexOf(socket);
    if (~i) {
      var nsp = this.sockets[i].nsp.name;
      this.sockets.splice(i, 1);
      delete this.nsps[nsp];
    } else {
      debug('ignoring remove for %s', socket.id);
    }
  };
  Client.prototype.close = function() {
    if ('open' == this.conn.readyState) {
      debug('forcing transport close');
      this.conn.close();
      this.onclose('forced server close');
    }
  };
  Client.prototype.packet = function(packet, preEncoded, volatile) {
    var self = this;
    function writeToEngine(encodedPackets) {
      if (volatile && !self.conn.transport.writable)
        return;
      for (var i = 0; i < encodedPackets.length; i++) {
        self.conn.write(encodedPackets[i]);
      }
    }
    if ('open' == this.conn.readyState) {
      debug('writing packet %j', packet);
      if (!preEncoded) {
        this.encoder.encode(packet, function(encodedPackets) {
          writeToEngine(encodedPackets);
        });
      } else {
        writeToEngine(packet);
      }
    } else {
      debug('ignoring packet write %j', packet);
    }
  };
  Client.prototype.ondata = function(data) {
    try {
      this.decoder.add(data);
    } catch (e) {
      this.onerror(e);
    }
  };
  Client.prototype.ondecoded = function(packet) {
    if (parser.CONNECT == packet.type) {
      this.connect(packet.nsp);
    } else {
      var socket = this.nsps[packet.nsp];
      if (socket) {
        socket.onpacket(packet);
      } else {
        debug('no socket for namespace %s', packet.nsp);
      }
    }
  };
  Client.prototype.onerror = function(err) {
    this.sockets.forEach(function(socket) {
      socket.onerror(err);
    });
    this.onclose('client error');
  };
  Client.prototype.onclose = function(reason) {
    debug('client close with reason %s', reason);
    this.destroy();
    var socket;
    while (socket = this.sockets.shift()) {
      socket.onclose(reason);
    }
    this.decoder.destroy();
  };
  Client.prototype.destroy = function() {
    this.conn.removeListener('data', this.ondata);
    this.conn.removeListener('error', this.onerror);
    this.conn.removeListener('close', this.onclose);
    this.decoder.removeListener('decoded', this.ondecoded);
  };
  return {};
});
System.get("../../../../node_modules/socket.io/lib/client.js" + '');
