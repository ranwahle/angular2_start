System.registerModule("../../../../../node_modules/weinre/web/client/Settings.js", [], function() {
  "use strict";
  var __moduleName = "../../../../../node_modules/weinre/web/client/Settings.js";
  var Preferences = {
    canEditScriptSource: false,
    maxInlineTextChildLength: 80,
    minConsoleHeight: 75,
    minSidebarWidth: 100,
    minElementsSidebarWidth: 200,
    minScriptsSidebarWidth: 200,
    styleRulesExpandedState: {},
    showMissingLocalizedStrings: false,
    samplingCPUProfiler: false,
    showColorNicknames: true,
    debuggerAlwaysEnabled: false,
    profilerAlwaysEnabled: false,
    onlineDetectionEnabled: true,
    nativeInstrumentationEnabled: false,
    resourceExportEnabled: false,
    useDataURLForResourceImageIcons: true,
    showTimingTab: false,
    showCookiesTab: false,
    debugMode: false,
    heapProfilerPresent: false,
    detailedHeapProfiles: false
  };
  WebInspector.Settings = function() {
    this.installApplicationSetting("colorFormat", "hex");
    this.installApplicationSetting("consoleHistory", []);
    this.installApplicationSetting("debuggerEnabled", false);
    this.installApplicationSetting("profilerEnabled", false);
    this.installApplicationSetting("eventListenersFilter", "all");
    this.installApplicationSetting("lastActivePanel", "elements");
    this.installApplicationSetting("lastViewedScriptFile", "application");
    this.installApplicationSetting("monitoringXHREnabled", false);
    this.installApplicationSetting("pauseOnExceptionState", WebInspector.ScriptsPanel.PauseOnExceptionsState.DontPauseOnExceptions);
    this.installApplicationSetting("resourcesLargeRows", true);
    this.installApplicationSetting("resourcesSortOptions", {
      timeOption: "responseTime",
      sizeOption: "transferSize"
    });
    this.installApplicationSetting("resourceViewTab", "content");
    this.installApplicationSetting("showInheritedComputedStyleProperties", false);
    this.installApplicationSetting("showUserAgentStyles", true);
    this.installApplicationSetting("watchExpressions", []);
    this.installApplicationSetting("breakpoints", []);
    this.installProjectSetting("nativeBreakpoints", []);
  };
  WebInspector.Settings.Events = {ProjectChanged: "project-changed"};
  WebInspector.Settings.prototype = {
    installApplicationSetting: function(key, defaultValue) {
      if (key in this)
        return;
      Object.defineProperty(this, key, {
        get: this._get.bind(this, key, defaultValue),
        set: this._set.bind(this, key)
      });
    },
    installProjectSetting: function(key, defaultValue) {
      Object.defineProperty(this, key, {
        get: this._getProjectSetting.bind(this, key, defaultValue),
        set: this._setProjectSetting.bind(this, key)
      });
    },
    inspectedURLChanged: function(url) {
      var fragmentIndex = url.indexOf("#");
      if (fragmentIndex !== -1)
        url = url.substring(0, fragmentIndex);
      this._projectId = url;
      this.dispatchEventToListeners(WebInspector.Settings.Events.ProjectChanged);
    },
    get projectId() {
      return this._projectId;
    },
    findSettingForAllProjects: function(key) {
      var result = {};
      var regexp = "^" + key + ":(.*)";
      for (var i = 0; i < window.localStorage.length; ++i) {
        var fullKey = window.localStorage.key(i);
        var match = fullKey.match(regexp);
        if (!match)
          continue;
        try {
          result[match[1]] = JSON.parse(window.localStorage[fullKey]);
        } catch (e) {
          window.localStorage.removeItem(fullKey);
        }
      }
      return result;
    },
    _get: function(key, defaultValue) {
      if (key in window.localStorage) {
        try {
          return JSON.parse(window.localStorage[key]);
        } catch (e) {
          window.localStorage.removeItem(key);
        }
      }
      return defaultValue;
    },
    _set: function(key, value) {
      window.localStorage[key] = JSON.stringify(value);
    },
    _getProjectSetting: function(key, defaultValue) {
      return this._get(this._formatProjectKey(key), defaultValue);
    },
    _setProjectSetting: function(key, value) {
      return this._set(this._formatProjectKey(key), value);
    },
    _formatProjectKey: function(key) {
      return key + ":" + this._projectId;
    }
  };
  WebInspector.Settings.prototype.__proto__ = WebInspector.Object.prototype;
  return {};
});
System.get("../../../../../node_modules/weinre/web/client/Settings.js" + '');
