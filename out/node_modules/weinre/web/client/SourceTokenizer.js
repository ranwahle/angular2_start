System.registerModule("../../../../../node_modules/weinre/web/client/SourceTokenizer.js", [], function() {
  "use strict";
  var __moduleName = "../../../../../node_modules/weinre/web/client/SourceTokenizer.js";
  WebInspector.SourceTokenizer = function() {};
  WebInspector.SourceTokenizer.prototype = {
    set line(line) {
      this._line = line;
    },
    set condition(condition) {
      this._condition = condition;
    },
    get condition() {
      return this._condition;
    },
    get subTokenizer() {
      return this._condition.subTokenizer;
    },
    getLexCondition: function() {
      return this.condition.lexCondition;
    },
    setLexCondition: function(lexCondition) {
      this.condition.lexCondition = lexCondition;
    },
    _charAt: function(cursor) {
      return cursor < this._line.length ? this._line.charAt(cursor) : "\n";
    }
  };
  WebInspector.SourceTokenizer.Registry = function() {
    this._tokenizers = {};
    this._tokenizerConstructors = {
      "text/css": "SourceCSSTokenizer",
      "text/html": "SourceHTMLTokenizer",
      "text/javascript": "SourceJavaScriptTokenizer"
    };
  };
  WebInspector.SourceTokenizer.Registry.getInstance = function() {
    if (!WebInspector.SourceTokenizer.Registry._instance)
      WebInspector.SourceTokenizer.Registry._instance = new WebInspector.SourceTokenizer.Registry();
    return WebInspector.SourceTokenizer.Registry._instance;
  };
  WebInspector.SourceTokenizer.Registry.prototype = {getTokenizer: function(mimeType) {
      if (!this._tokenizerConstructors[mimeType])
        return null;
      var tokenizerClass = this._tokenizerConstructors[mimeType];
      var tokenizer = this._tokenizers[tokenizerClass];
      if (!tokenizer) {
        tokenizer = new WebInspector[tokenizerClass]();
        this._tokenizers[mimeType] = tokenizer;
      }
      return tokenizer;
    }};
  return {};
});
System.get("../../../../../node_modules/weinre/web/client/SourceTokenizer.js" + '');
