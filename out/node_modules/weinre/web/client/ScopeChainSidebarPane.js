System.registerModule("../../../../../node_modules/weinre/web/client/ScopeChainSidebarPane.js", [], function() {
  "use strict";
  var __moduleName = "../../../../../node_modules/weinre/web/client/ScopeChainSidebarPane.js";
  WebInspector.ScopeChainSidebarPane = function() {
    WebInspector.SidebarPane.call(this, WebInspector.UIString("Scope Variables"));
    this._sections = [];
    this._expandedSections = {};
    this._expandedProperties = [];
  };
  WebInspector.ScopeChainSidebarPane.prototype = {update: function(callFrame) {
      this.bodyElement.removeChildren();
      if (!callFrame) {
        var infoElement = document.createElement("div");
        infoElement.className = "info";
        infoElement.textContent = WebInspector.UIString("Not Paused");
        this.bodyElement.appendChild(infoElement);
        return;
      }
      for (var i = 0; i < this._sections.length; ++i) {
        var section = this._sections[i];
        if (!section.title)
          continue;
        if (section.expanded)
          this._expandedSections[section.title] = true;
        else
          delete this._expandedSections[section.title];
      }
      this._sections = [];
      var foundLocalScope = false;
      var scopeChain = callFrame.scopeChain;
      for (var i = 0; i < scopeChain.length; ++i) {
        var scopeObjectProxy = scopeChain[i];
        var title = null;
        var subtitle = scopeObjectProxy.description;
        var emptyPlaceholder = null;
        var extraProperties = null;
        if (scopeObjectProxy.isLocal) {
          foundLocalScope = true;
          title = WebInspector.UIString("Local");
          emptyPlaceholder = WebInspector.UIString("No Variables");
          subtitle = null;
          if (scopeObjectProxy.thisObject)
            extraProperties = [new WebInspector.RemoteObjectProperty("this", WebInspector.RemoteObject.fromPayload(scopeObjectProxy.thisObject))];
        } else if (scopeObjectProxy.isClosure) {
          title = WebInspector.UIString("Closure");
          emptyPlaceholder = WebInspector.UIString("No Variables");
          subtitle = null;
        } else if (i === (scopeChain.length - 1))
          title = WebInspector.UIString("Global");
        else if (scopeObjectProxy.isElement)
          title = WebInspector.UIString("Event Target");
        else if (scopeObjectProxy.isDocument)
          title = WebInspector.UIString("Event Document");
        else if (scopeObjectProxy.isWithBlock)
          title = WebInspector.UIString("With Block");
        if (!title || title === subtitle)
          subtitle = null;
        var section = new WebInspector.ObjectPropertiesSection(WebInspector.RemoteObject.fromPayload(scopeObjectProxy), title, subtitle, emptyPlaceholder, true, extraProperties, WebInspector.ScopeVariableTreeElement);
        section.editInSelectedCallFrameWhenPaused = true;
        section.pane = this;
        if (!foundLocalScope || scopeObjectProxy.isLocal || title in this._expandedSections)
          section.expanded = true;
        this._sections.push(section);
        this.bodyElement.appendChild(section.element);
      }
    }};
  WebInspector.ScopeChainSidebarPane.prototype.__proto__ = WebInspector.SidebarPane.prototype;
  WebInspector.ScopeVariableTreeElement = function(property) {
    WebInspector.ObjectPropertyTreeElement.call(this, property);
  };
  WebInspector.ScopeVariableTreeElement.prototype = {
    onattach: function() {
      WebInspector.ObjectPropertyTreeElement.prototype.onattach.call(this);
      if (this.hasChildren && this.propertyIdentifier in this.treeOutline.section.pane._expandedProperties)
        this.expand();
    },
    onexpand: function() {
      this.treeOutline.section.pane._expandedProperties[this.propertyIdentifier] = true;
    },
    oncollapse: function() {
      delete this.treeOutline.section.pane._expandedProperties[this.propertyIdentifier];
    },
    get propertyIdentifier() {
      if ("_propertyIdentifier" in this)
        return this._propertyIdentifier;
      var section = this.treeOutline.section;
      this._propertyIdentifier = section.title + ":" + (section.subtitle ? section.subtitle + ":" : "") + this.propertyPath;
      return this._propertyIdentifier;
    },
    get propertyPath() {
      if ("_propertyPath" in this)
        return this._propertyPath;
      var current = this;
      var result;
      do {
        if (result)
          result = current.property.name + "." + result;
        else
          result = current.property.name;
        current = current.parent;
      } while (current && !current.root);
      this._propertyPath = result;
      return result;
    }
  };
  WebInspector.ScopeVariableTreeElement.prototype.__proto__ = WebInspector.ObjectPropertyTreeElement.prototype;
  return {};
});
System.get("../../../../../node_modules/weinre/web/client/ScopeChainSidebarPane.js" + '');
