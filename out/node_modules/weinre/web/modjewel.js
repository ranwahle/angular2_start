System.registerModule("../../../../node_modules/weinre/web/modjewel.js", [], function() {
  "use strict";
  var __moduleName = "../../../../node_modules/weinre/web/modjewel.js";
  (function() {
    var PROGRAM = "modjewel";
    var VERSION = "2.0.0";
    var global = this;
    if (global.modjewel) {
      log("modjewel global variable already defined");
      return;
    }
    global.modjewel = null;
    var ModuleStore;
    var ModulePreloadStore;
    var MainModule;
    var WarnOnRecursiveRequire = false;
    function get_require(currentModule) {
      var result = function require(moduleId) {
        if (moduleId.match(/^\.{1,2}\//)) {
          moduleId = normalize(currentModule, moduleId);
        }
        if (hop(ModuleStore, moduleId)) {
          var module = ModuleStore[moduleId];
          if (module.__isLoading) {
            if (WarnOnRecursiveRequire) {
              var fromModule = currentModule ? currentModule.id : "<root>";
              console.log("module '" + moduleId + "' recursively require()d from '" + fromModule + "', problem?");
            }
          }
          currentModule.moduleIdsRequired.push(moduleId);
          return module.exports;
        }
        if (!hop(ModulePreloadStore, moduleId)) {
          var fromModule = currentModule ? currentModule.id : "<root>";
          error("module '" + moduleId + "' not found from '" + fromModule + "', must be define()'d first");
        }
        var factory = ModulePreloadStore[moduleId][0];
        var prereqs = ModulePreloadStore[moduleId][1];
        var module = create_module(moduleId);
        var newRequire = get_require(module);
        ModuleStore[moduleId] = module;
        module.__isLoading = true;
        try {
          currentModule.moduleIdsRequired.push(moduleId);
          var prereqModules = [];
          for (var i = 0; i < prereqs.length; i++) {
            var prereqId = prereqs[i];
            var prereqModule = void 0;
            if (prereqId == "require")
              prereqModule = newRequire;
            else if (prereqId == "exports")
              prereqModule = module.exports;
            else if (prereqId == "module")
              prereqModule = module;
            else
              prereqModule = newRequire(prereqId);
            prereqModules.push(prereqModule);
          }
          if (typeof factory == "function") {
            var result = factory.apply(null, prereqModules);
            if (result) {
              module.exports = result;
            }
          } else {
            module.exports = factory;
          }
        } finally {
          module.__isLoading = false;
        }
        return module.exports;
      };
      result.define = require_define;
      result.implementation = PROGRAM;
      result.version = VERSION;
      return result;
    }
    function hop(object, name) {
      return Object.prototype.hasOwnProperty.call(object, name);
    }
    function create_module(id) {
      return {
        id: id,
        uri: id,
        exports: {},
        prereqIds: [],
        moduleIdsRequired: []
      };
    }
    function require_reset() {
      ModuleStore = {};
      ModulePreloadStore = {};
      MainModule = create_module(null);
      var require = get_require(MainModule);
      var define = require_define;
      define("modjewel", modjewel_module);
      global.modjewel = require("modjewel");
      global.modjewel.require = require;
      global.modjewel.define = define;
      global.modjewel.define.amd = {
        implementation: PROGRAM,
        version: VERSION
      };
    }
    function require_define(moduleId, prereqs, factory) {
      var rem = ["require", "exports", "module"];
      if (typeof moduleId != "string") {
        console.log("modjewel.define(): first parameter must be a string; was: " + moduleId);
        return;
      }
      if (arguments.length == 2) {
        factory = prereqs;
        prereqs = null;
      }
      if (!prereqs || prereqs.length == 0) {
        prereqs = rem;
      }
      if (typeof factory != "function") {
        if (factory) {
          ModulePreloadStore[moduleId] = [factory, prereqs];
          return;
        }
        console.log("modjewel.define(): factory was falsy: " + factory);
        return;
      }
      if (moduleId.match(/^\./)) {
        console.log("modjewel.define(): moduleId must not start with '.': '" + moduleName + "'");
        return;
      }
      if (hop(ModulePreloadStore, moduleId)) {
        console.log("modjewel.define(): module '" + moduleId + "' has already been defined");
        return;
      }
      ModulePreloadStore[moduleId] = [factory, prereqs];
    }
    function getModulePath(module) {
      if (!module || !module.id)
        return "";
      var parts = module.id.split("/");
      return parts.slice(0, parts.length - 1).join("/");
    }
    function normalize(module, file) {
      var modulePath = getModulePath(module);
      var dirParts = ("" == modulePath) ? [] : modulePath.split("/");
      var fileParts = file.split("/");
      for (var i = 0; i < fileParts.length; i++) {
        var filePart = fileParts[i];
        if (filePart == ".") {} else if (filePart == "..") {
          if (dirParts.length > 0) {
            dirParts.pop();
          } else {}
        } else {
          dirParts.push(filePart);
        }
      }
      return dirParts.join("/");
    }
    function error(message) {
      throw new Error(PROGRAM + ": " + message);
    }
    function modjewel_getLoadedModuleIds() {
      var result = [];
      for (moduleId in ModuleStore) {
        result.push(moduleId);
      }
      return result;
    }
    function modjewel_getPreloadedModuleIds() {
      var result = [];
      for (moduleId in ModulePreloadStore) {
        result.push(moduleId);
      }
      return result;
    }
    function modjewel_getModule(moduleId) {
      if (null == moduleId)
        return MainModule;
      return ModuleStore[moduleId];
    }
    function modjewel_getModuleIdsRequired(moduleId) {
      var module = modjewel_getModule(moduleId);
      if (null == module)
        return null;
      return module.moduleIdsRequired.slice();
    }
    function modjewel_warnOnRecursiveRequire(value) {
      if (arguments.length == 0)
        return WarnOnRecursiveRequire;
      WarnOnRecursiveRequire = !!value;
    }
    function modjewel_module(require, exports, module) {
      exports.VERSION = VERSION;
      exports.require = null;
      exports.define = null;
      exports.getLoadedModuleIds = modjewel_getLoadedModuleIds;
      exports.getPreloadedModuleIds = modjewel_getPreloadedModuleIds;
      exports.getModule = modjewel_getModule;
      exports.getModuleIdsRequired = modjewel_getModuleIdsRequired;
      exports.warnOnRecursiveRequire = modjewel_warnOnRecursiveRequire;
    }
    function log(message) {
      console.log("modjewel: " + message);
    }
    require_reset();
  })();
  return {};
});
System.get("../../../../node_modules/weinre/web/modjewel.js" + '');
